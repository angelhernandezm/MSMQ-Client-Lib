// Created by Microsoft (R) C/C++ Compiler Version 12.00.31101.0 (9276927f).
//
// c:\temp\msmq\msmqclientlib\msmqbridge\mqoa.tlh
//
// C++ source equivalent of Win32 type library mqoa.dll
// compiler-generated file created 02/06/15 at 17:48:46 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace MSMQ {

//
// Forward references and typedefs
//

struct __declspec(uuid("d7d6e071-dccd-11d0-aa4b-0060970debae"))
/* LIBID */ __MSMQ;
struct __declspec(uuid("d7d6e072-dccd-11d0-aa4b-0060970debae"))
/* dual interface */ IMSMQQuery;
struct __declspec(uuid("d7d6e07d-dccd-11d0-aa4b-0060970debae"))
/* dual interface */ IMSMQQueueInfos;
struct __declspec(uuid("d7d6e07b-dccd-11d0-aa4b-0060970debae"))
/* dual interface */ IMSMQQueueInfo;
struct __declspec(uuid("d7d6e076-dccd-11d0-aa4b-0060970debae"))
/* dual interface */ IMSMQQueue;
struct __declspec(uuid("d7d6e074-dccd-11d0-aa4b-0060970debae"))
/* dual interface */ IMSMQMessage;
struct __declspec(uuid("d7d6e077-dccd-11d0-aa4b-0060970debae"))
/* dual interface */ IMSMQEvent;
struct __declspec(uuid("fd174a80-89cf-11d2-b0f2-00e02c074f6b"))
/* dual interface */ IMSMQQueueInfo2;
struct __declspec(uuid("ef0574e0-06d8-11d3-b100-00e02c074f6b"))
/* dual interface */ IMSMQQueue2;
struct __declspec(uuid("eba96b12-2168-11d3-898c-00e02c074f6b"))
/* dual interface */ IMSMQEvent2;
struct __declspec(uuid("d9933be0-a567-11d2-b0f3-00e02c074f6b"))
/* dual interface */ IMSMQMessage2;
struct __declspec(uuid("eba96b1d-2168-11d3-898c-00e02c074f6b"))
/* dual interface */ IMSMQQueueInfo3;
struct __declspec(uuid("eba96b1b-2168-11d3-898c-00e02c074f6b"))
/* dual interface */ IMSMQQueue3;
struct __declspec(uuid("eba96b1c-2168-11d3-898c-00e02c074f6b"))
/* dual interface */ IMSMQEvent3;
struct __declspec(uuid("eba96b1a-2168-11d3-898c-00e02c074f6b"))
/* dual interface */ IMSMQMessage3;
struct __declspec(uuid("eba96b21-2168-11d3-898c-00e02c074f6b"))
/* dual interface */ IMSMQQueueInfo4;
struct __declspec(uuid("eba96b20-2168-11d3-898c-00e02c074f6b"))
/* dual interface */ IMSMQQueue4;
struct __declspec(uuid("eba96b23-2168-11d3-898c-00e02c074f6b"))
/* dual interface */ IMSMQMessage4;
struct __declspec(uuid("eba96b0f-2168-11d3-898c-00e02c074f6b"))
/* dual interface */ IMSMQQueueInfos2;
struct __declspec(uuid("eba96b1e-2168-11d3-898c-00e02c074f6b"))
/* dual interface */ IMSMQQueueInfos3;
struct __declspec(uuid("eba96b22-2168-11d3-898c-00e02c074f6b"))
/* dual interface */ IMSMQQueueInfos4;
struct __declspec(uuid("d7d6e07f-dccd-11d0-aa4b-0060970debae"))
/* dual interface */ IMSMQTransaction;
struct __declspec(uuid("d7d6e081-dccd-11d0-aa4b-0060970debae"))
/* dual interface */ IMSMQCoordinatedTransactionDispenser;
struct __declspec(uuid("d7d6e083-dccd-11d0-aa4b-0060970debae"))
/* dual interface */ IMSMQTransactionDispenser;
enum MQCALG;
enum MQTRANSACTION;
enum RELOPS;
enum MQCERT_REGISTER;
enum MQMSGCURSOR;
enum MQMSGCLASS;
enum MQMSGDELIVERY;
enum MQMSGACKNOWLEDGEMENT;
enum MQMSGJOURNAL;
enum MQMSGTRACE;
enum MQMSGSENDERIDTYPE;
enum MQMSGPRIVLEVEL;
enum MQMSGAUTHLEVEL;
enum MQMSGIDSIZE;
enum MQMSGMAX;
enum MQMSGAUTHENTICATION;
enum MQSHARE;
enum MQACCESS;
enum MQJOURNAL;
enum MQTRANSACTIONAL;
enum MQAUTHENTICATE;
enum MQPRIVLEVEL;
enum MQPRIORITY;
enum MQMAX;
enum QUEUE_TYPE;
enum FOREIGN_STATUS;
enum XACT_STATUS;
enum QUEUE_STATE;
enum MQDEFAULT;
enum MQERROR;
enum MQWARNING;
struct __declspec(uuid("eba96b0e-2168-11d3-898c-00e02c074f6b"))
/* dual interface */ IMSMQQuery2;
struct __declspec(uuid("eba96b19-2168-11d3-898c-00e02c074f6b"))
/* dual interface */ IMSMQQuery3;
struct __declspec(uuid("eba96b24-2168-11d3-898c-00e02c074f6b"))
/* dual interface */ IMSMQQuery4;
struct /* coclass */ MSMQQuery;
struct /* coclass */ MSMQMessage;
struct /* coclass */ MSMQQueue;
struct __declspec(uuid("d7ab3341-c9d3-11d1-bb47-0080c7c5a2c0"))
/* dual interface */ IMSMQPrivateEvent;
struct __declspec(uuid("d7d6e078-dccd-11d0-aa4b-0060970debae"))
/* dispinterface */ _DMSMQEventEvents;
struct /* coclass */ MSMQEvent;
struct /* coclass */ MSMQQueueInfo;
struct /* coclass */ MSMQQueueInfos;
struct __declspec(uuid("2ce0c5b0-6e67-11d2-b0e6-00e02c074f6b"))
/* dual interface */ IMSMQTransaction2;
struct __declspec(uuid("eba96b13-2168-11d3-898c-00e02c074f6b"))
/* dual interface */ IMSMQTransaction3;
struct /* coclass */ MSMQTransaction;
struct __declspec(uuid("eba96b10-2168-11d3-898c-00e02c074f6b"))
/* dual interface */ IMSMQCoordinatedTransactionDispenser2;
struct __declspec(uuid("eba96b14-2168-11d3-898c-00e02c074f6b"))
/* dual interface */ IMSMQCoordinatedTransactionDispenser3;
struct /* coclass */ MSMQCoordinatedTransactionDispenser;
struct __declspec(uuid("eba96b11-2168-11d3-898c-00e02c074f6b"))
/* dual interface */ IMSMQTransactionDispenser2;
struct __declspec(uuid("eba96b15-2168-11d3-898c-00e02c074f6b"))
/* dual interface */ IMSMQTransactionDispenser3;
struct /* coclass */ MSMQTransactionDispenser;
struct __declspec(uuid("d7d6e085-dccd-11d0-aa4b-0060970debae"))
/* dual interface */ IMSMQApplication;
struct __declspec(uuid("12a30900-7300-11d2-b0e6-00e02c074f6b"))
/* dual interface */ IMSMQApplication2;
struct __declspec(uuid("eba96b1f-2168-11d3-898c-00e02c074f6b"))
/* dual interface */ IMSMQApplication3;
struct /* coclass */ MSMQApplication;
struct __declspec(uuid("eba96b16-2168-11d3-898c-00e02c074f6b"))
/* dual interface */ IMSMQDestination;
struct __declspec(uuid("eba96b17-2168-11d3-898c-00e02c074f6b"))
/* dual interface */ IMSMQPrivateDestination;
struct /* coclass */ MSMQDestination;
struct __declspec(uuid("0188ac2f-ecb3-4173-9779-635ca2039c72"))
/* dual interface */ IMSMQCollection;
struct /* coclass */ MSMQCollection;
struct __declspec(uuid("be5f0241-e489-4957-8cc4-a452fcf3e23e"))
/* dual interface */ IMSMQManagement;
struct /* coclass */ MSMQManagement;
struct __declspec(uuid("64c478fb-f9b0-4695-8a7f-439ac94326d3"))
/* dual interface */ IMSMQOutgoingQueueManagement;
struct /* coclass */ MSMQOutgoingQueueManagement;
struct __declspec(uuid("7fbe7759-5760-444d-b8a5-5e7ab9a84cce"))
/* dual interface */ IMSMQQueueManagement;
struct /* coclass */ MSMQQueueManagement;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IMSMQEvent, __uuidof(IMSMQEvent));
_COM_SMARTPTR_TYPEDEF(IMSMQEvent2, __uuidof(IMSMQEvent2));
_COM_SMARTPTR_TYPEDEF(IMSMQEvent3, __uuidof(IMSMQEvent3));
_COM_SMARTPTR_TYPEDEF(IMSMQTransaction, __uuidof(IMSMQTransaction));
_COM_SMARTPTR_TYPEDEF(IMSMQCoordinatedTransactionDispenser, __uuidof(IMSMQCoordinatedTransactionDispenser));
_COM_SMARTPTR_TYPEDEF(IMSMQTransactionDispenser, __uuidof(IMSMQTransactionDispenser));
_COM_SMARTPTR_TYPEDEF(_DMSMQEventEvents, __uuidof(_DMSMQEventEvents));
_COM_SMARTPTR_TYPEDEF(IMSMQTransaction2, __uuidof(IMSMQTransaction2));
_COM_SMARTPTR_TYPEDEF(IMSMQTransaction3, __uuidof(IMSMQTransaction3));
_COM_SMARTPTR_TYPEDEF(IMSMQCoordinatedTransactionDispenser2, __uuidof(IMSMQCoordinatedTransactionDispenser2));
_COM_SMARTPTR_TYPEDEF(IMSMQCoordinatedTransactionDispenser3, __uuidof(IMSMQCoordinatedTransactionDispenser3));
_COM_SMARTPTR_TYPEDEF(IMSMQTransactionDispenser2, __uuidof(IMSMQTransactionDispenser2));
_COM_SMARTPTR_TYPEDEF(IMSMQTransactionDispenser3, __uuidof(IMSMQTransactionDispenser3));
_COM_SMARTPTR_TYPEDEF(IMSMQApplication, __uuidof(IMSMQApplication));
_COM_SMARTPTR_TYPEDEF(IMSMQApplication2, __uuidof(IMSMQApplication2));
_COM_SMARTPTR_TYPEDEF(IMSMQApplication3, __uuidof(IMSMQApplication3));
_COM_SMARTPTR_TYPEDEF(IMSMQDestination, __uuidof(IMSMQDestination));
_COM_SMARTPTR_TYPEDEF(IMSMQPrivateDestination, __uuidof(IMSMQPrivateDestination));
_COM_SMARTPTR_TYPEDEF(IMSMQCollection, __uuidof(IMSMQCollection));
_COM_SMARTPTR_TYPEDEF(IMSMQManagement, __uuidof(IMSMQManagement));
_COM_SMARTPTR_TYPEDEF(IMSMQOutgoingQueueManagement, __uuidof(IMSMQOutgoingQueueManagement));
_COM_SMARTPTR_TYPEDEF(IMSMQQueueManagement, __uuidof(IMSMQQueueManagement));
_COM_SMARTPTR_TYPEDEF(IMSMQQuery, __uuidof(IMSMQQuery));
_COM_SMARTPTR_TYPEDEF(IMSMQQueueInfos, __uuidof(IMSMQQueueInfos));
_COM_SMARTPTR_TYPEDEF(IMSMQQueueInfo, __uuidof(IMSMQQueueInfo));
_COM_SMARTPTR_TYPEDEF(IMSMQQueue, __uuidof(IMSMQQueue));
_COM_SMARTPTR_TYPEDEF(IMSMQMessage, __uuidof(IMSMQMessage));
_COM_SMARTPTR_TYPEDEF(IMSMQPrivateEvent, __uuidof(IMSMQPrivateEvent));
_COM_SMARTPTR_TYPEDEF(IMSMQQueueInfo2, __uuidof(IMSMQQueueInfo2));
_COM_SMARTPTR_TYPEDEF(IMSMQQueueInfos2, __uuidof(IMSMQQueueInfos2));
_COM_SMARTPTR_TYPEDEF(IMSMQQuery2, __uuidof(IMSMQQuery2));
_COM_SMARTPTR_TYPEDEF(IMSMQQueue2, __uuidof(IMSMQQueue2));
_COM_SMARTPTR_TYPEDEF(IMSMQMessage2, __uuidof(IMSMQMessage2));
_COM_SMARTPTR_TYPEDEF(IMSMQQueueInfo3, __uuidof(IMSMQQueueInfo3));
_COM_SMARTPTR_TYPEDEF(IMSMQMessage3, __uuidof(IMSMQMessage3));
_COM_SMARTPTR_TYPEDEF(IMSMQQueue3, __uuidof(IMSMQQueue3));
_COM_SMARTPTR_TYPEDEF(IMSMQQueueInfos3, __uuidof(IMSMQQueueInfos3));
_COM_SMARTPTR_TYPEDEF(IMSMQQuery3, __uuidof(IMSMQQuery3));
_COM_SMARTPTR_TYPEDEF(IMSMQQueueInfo4, __uuidof(IMSMQQueueInfo4));
_COM_SMARTPTR_TYPEDEF(IMSMQMessage4, __uuidof(IMSMQMessage4));
_COM_SMARTPTR_TYPEDEF(IMSMQQueue4, __uuidof(IMSMQQueue4));
_COM_SMARTPTR_TYPEDEF(IMSMQQueueInfos4, __uuidof(IMSMQQueueInfos4));
_COM_SMARTPTR_TYPEDEF(IMSMQQuery4, __uuidof(IMSMQQuery4));

//
// Type library items
//

struct __declspec(uuid("d7d6e077-dccd-11d0-aa4b-0060970debae"))
IMSMQEvent : IDispatch
{};

struct __declspec(uuid("eba96b12-2168-11d3-898c-00e02c074f6b"))
IMSMQEvent2 : IMSMQEvent
{
    //
    // Property data
    //

    __declspec(property(get=GetProperties))
    IDispatchPtr Properties;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetProperties ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ IDispatch * * ppcolProperties ) = 0;
};

struct __declspec(uuid("eba96b1c-2168-11d3-898c-00e02c074f6b"))
IMSMQEvent3 : IMSMQEvent2
{};

struct __declspec(uuid("d7d6e07f-dccd-11d0-aa4b-0060970debae"))
IMSMQTransaction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTransaction))
    long Transaction;

    //
    // Wrapper methods for error-handling
    //

    long GetTransaction ( );
    HRESULT Commit (
        VARIANT * fRetaining = &vtMissing,
        VARIANT * grfTC = &vtMissing,
        VARIANT * grfRM = &vtMissing );
    HRESULT Abort (
        VARIANT * fRetaining = &vtMissing,
        VARIANT * fAsync = &vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Transaction (
        /*[out,retval]*/ long * plTransaction ) = 0;
      virtual HRESULT __stdcall raw_Commit (
        /*[in]*/ VARIANT * fRetaining = &vtMissing,
        /*[in]*/ VARIANT * grfTC = &vtMissing,
        /*[in]*/ VARIANT * grfRM = &vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Abort (
        /*[in]*/ VARIANT * fRetaining = &vtMissing,
        /*[in]*/ VARIANT * fAsync = &vtMissing ) = 0;
};

struct __declspec(uuid("d7d6e081-dccd-11d0-aa4b-0060970debae"))
IMSMQCoordinatedTransactionDispenser : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IMSMQTransactionPtr BeginTransaction ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_BeginTransaction (
        /*[out,retval]*/ struct IMSMQTransaction * * ptransaction ) = 0;
};

struct __declspec(uuid("d7d6e083-dccd-11d0-aa4b-0060970debae"))
IMSMQTransactionDispenser : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IMSMQTransactionPtr BeginTransaction ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_BeginTransaction (
        /*[out,retval]*/ struct IMSMQTransaction * * ptransaction ) = 0;
};

enum MQCALG
{
    MQMSG_CALG_MD2 = 32769,
    MQMSG_CALG_MD4 = 32770,
    MQMSG_CALG_MD5 = 32771,
    MQMSG_CALG_SHA = 32772,
    MQMSG_CALG_SHA1 = 32772,
    MQMSG_CALG_MAC = 32773,
    MQMSG_CALG_RSA_SIGN = 9216,
    MQMSG_CALG_DSS_SIGN = 8704,
    MQMSG_CALG_RSA_KEYX = 41984,
    MQMSG_CALG_DES = 26113,
    MQMSG_CALG_RC2 = 26114,
    MQMSG_CALG_RC4 = 26625,
    MQMSG_CALG_SEAL = 26626
};

enum MQTRANSACTION
{
    MQ_NO_TRANSACTION = 0,
    MQ_MTS_TRANSACTION = 1,
    MQ_XA_TRANSACTION = 2,
    MQ_SINGLE_MESSAGE = 3
};

enum RELOPS
{
    REL_NOP = 0,
    REL_EQ = 1,
    REL_NEQ = 2,
    REL_LT = 3,
    REL_GT = 4,
    REL_LE = 5,
    REL_GE = 6
};

enum MQCERT_REGISTER
{
    MQCERT_REGISTER_ALWAYS = 1,
    MQCERT_REGISTER_IF_NOT_EXIST = 2
};

enum MQMSGCURSOR
{
    MQMSG_FIRST = 0,
    MQMSG_CURRENT = 1,
    MQMSG_NEXT = 2
};

enum MQMSGCLASS
{
    MQMSG_CLASS_NORMAL = 0,
    MQMSG_CLASS_REPORT = 1,
    MQMSG_CLASS_ACK_REACH_QUEUE = 2,
    MQMSG_CLASS_ACK_RECEIVE = 16384,
    MQMSG_CLASS_NACK_BAD_DST_Q = 32768,
    MQMSG_CLASS_NACK_PURGED = 32769,
    MQMSG_CLASS_NACK_REACH_QUEUE_TIMEOUT = 32770,
    MQMSG_CLASS_NACK_Q_EXCEED_QUOTA = 32771,
    MQMSG_CLASS_NACK_ACCESS_DENIED = 32772,
    MQMSG_CLASS_NACK_HOP_COUNT_EXCEEDED = 32773,
    MQMSG_CLASS_NACK_BAD_SIGNATURE = 32774,
    MQMSG_CLASS_NACK_BAD_ENCRYPTION = 32775,
    MQMSG_CLASS_NACK_COULD_NOT_ENCRYPT = 32776,
    MQMSG_CLASS_NACK_NOT_TRANSACTIONAL_Q = 32777,
    MQMSG_CLASS_NACK_NOT_TRANSACTIONAL_MSG = 32778,
    MQMSG_CLASS_NACK_UNSUPPORTED_CRYPTO_PROVIDER = 32779,
    MQMSG_CLASS_NACK_SOURCE_COMPUTER_GUID_CHANGED = 32780,
    MQMSG_CLASS_NACK_Q_DELETED = 49152,
    MQMSG_CLASS_NACK_Q_PURGED = 49153,
    MQMSG_CLASS_NACK_RECEIVE_TIMEOUT = 49154,
    MQMSG_CLASS_NACK_RECEIVE_TIMEOUT_AT_SENDER = 49155
};

enum MQMSGDELIVERY
{
    MQMSG_DELIVERY_EXPRESS = 0,
    MQMSG_DELIVERY_RECOVERABLE = 1
};

enum MQMSGACKNOWLEDGEMENT
{
    MQMSG_ACKNOWLEDGMENT_NONE = 0,
    MQMSG_ACKNOWLEDGMENT_POS_ARRIVAL = 1,
    MQMSG_ACKNOWLEDGMENT_POS_RECEIVE = 2,
    MQMSG_ACKNOWLEDGMENT_NEG_ARRIVAL = 4,
    MQMSG_ACKNOWLEDGMENT_NEG_RECEIVE = 8,
    MQMSG_ACKNOWLEDGMENT_NACK_REACH_QUEUE = 4,
    MQMSG_ACKNOWLEDGMENT_FULL_REACH_QUEUE = 5,
    MQMSG_ACKNOWLEDGMENT_NACK_RECEIVE = 12,
    MQMSG_ACKNOWLEDGMENT_FULL_RECEIVE = 14
};

enum MQMSGJOURNAL
{
    MQMSG_JOURNAL_NONE = 0,
    MQMSG_DEADLETTER = 1,
    MQMSG_JOURNAL = 2
};

enum MQMSGTRACE
{
    MQMSG_TRACE_NONE = 0,
    MQMSG_SEND_ROUTE_TO_REPORT_QUEUE = 1
};

enum MQMSGSENDERIDTYPE
{
    MQMSG_SENDERID_TYPE_NONE = 0,
    MQMSG_SENDERID_TYPE_SID = 1
};

enum MQMSGPRIVLEVEL
{
    MQMSG_PRIV_LEVEL_NONE = 0,
    MQMSG_PRIV_LEVEL_BODY_BASE = 1,
    MQMSG_PRIV_LEVEL_BODY_ENHANCED = 3
};

enum MQMSGAUTHLEVEL
{
    MQMSG_AUTH_LEVEL_NONE = 0,
    MQMSG_AUTH_LEVEL_ALWAYS = 1,
    MQMSG_AUTH_LEVEL_MSMQ10 = 2,
    MQMSG_AUTH_LEVEL_SIG10 = 2,
    MQMSG_AUTH_LEVEL_MSMQ20 = 4,
    MQMSG_AUTH_LEVEL_SIG20 = 4,
    MQMSG_AUTH_LEVEL_SIG30 = 8
};

enum MQMSGIDSIZE
{
    MQMSG_MSGID_SIZE = 20,
    MQMSG_CORRELATIONID_SIZE = 20,
    MQMSG_XACTID_SIZE = 20
};

enum MQMSGMAX
{
    MQ_MAX_MSG_LABEL_LEN = 249
};

enum MQMSGAUTHENTICATION
{
    MQMSG_AUTHENTICATION_NOT_REQUESTED = 0,
    MQMSG_AUTHENTICATION_REQUESTED = 1,
    MQMSG_AUTHENTICATED_SIG10 = 1,
    MQMSG_AUTHENTICATION_REQUESTED_EX = 3,
    MQMSG_AUTHENTICATED_SIG20 = 3,
    MQMSG_AUTHENTICATED_SIG30 = 5,
    MQMSG_AUTHENTICATED_SIGXML = 9
};

enum MQSHARE
{
    MQ_DENY_NONE = 0,
    MQ_DENY_RECEIVE_SHARE = 1
};

enum MQACCESS
{
    MQ_RECEIVE_ACCESS = 1,
    MQ_SEND_ACCESS = 2,
    MQ_PEEK_ACCESS = 32,
    MQ_ADMIN_ACCESS = 128
};

enum MQJOURNAL
{
    MQ_JOURNAL_NONE = 0,
    MQ_JOURNAL = 1
};

enum MQTRANSACTIONAL
{
    MQ_TRANSACTIONAL_NONE = 0,
    MQ_TRANSACTIONAL = 1
};

enum MQAUTHENTICATE
{
    MQ_AUTHENTICATE_NONE = 0,
    MQ_AUTHENTICATE = 1
};

enum MQPRIVLEVEL
{
    MQ_PRIV_LEVEL_NONE = 0,
    MQ_PRIV_LEVEL_OPTIONAL = 1,
    MQ_PRIV_LEVEL_BODY = 2
};

enum MQPRIORITY
{
    MQ_MIN_PRIORITY = 0,
    MQ_MAX_PRIORITY = 7
};

enum MQMAX
{
    MQ_MAX_Q_NAME_LEN = 124,
    MQ_MAX_Q_LABEL_LEN = 124
};

enum QUEUE_TYPE
{
    MQ_TYPE_PUBLIC = 0,
    MQ_TYPE_PRIVATE = 1,
    MQ_TYPE_MACHINE = 2,
    MQ_TYPE_CONNECTOR = 3,
    MQ_TYPE_MULTICAST = 4
};

enum FOREIGN_STATUS
{
    MQ_STATUS_FOREIGN = 0,
    MQ_STATUS_NOT_FOREIGN = 1,
    MQ_STATUS_UNKNOWN = 2
};

enum XACT_STATUS
{
    MQ_XACT_STATUS_XACT = 0,
    MQ_XACT_STATUS_NOT_XACT = 1,
    MQ_XACT_STATUS_UNKNOWN = 2
};

enum QUEUE_STATE
{
    MQ_QUEUE_STATE_LOCAL_CONNECTION = 0,
    MQ_QUEUE_STATE_DISCONNECTED = 1,
    MQ_QUEUE_STATE_WAITING = 2,
    MQ_QUEUE_STATE_NEEDVALIDATE = 3,
    MQ_QUEUE_STATE_ONHOLD = 4,
    MQ_QUEUE_STATE_NONACTIVE = 5,
    MQ_QUEUE_STATE_CONNECTED = 6,
    MQ_QUEUE_STATE_DISCONNECTING = 7,
    MQ_QUEUE_STATE_LOCKED = 8
};

enum MQDEFAULT
{
    DEFAULT_M_PRIORITY = 3,
    DEFAULT_M_DELIVERY = 0,
    DEFAULT_M_ACKNOWLEDGE = 0,
    DEFAULT_M_JOURNAL = 0,
    DEFAULT_M_APPSPECIFIC = 0,
    DEFAULT_M_PRIV_LEVEL = 0,
    DEFAULT_M_AUTH_LEVEL = 0,
    DEFAULT_M_SENDERID_TYPE = 1,
    DEFAULT_Q_JOURNAL = 0,
    DEFAULT_Q_BASEPRIORITY = 0,
    DEFAULT_Q_QUOTA = -1,
    DEFAULT_Q_JOURNAL_QUOTA = -1,
    DEFAULT_Q_TRANSACTION = 0,
    DEFAULT_Q_AUTHENTICATE = 0,
    DEFAULT_Q_PRIV_LEVEL = 1,
    DEFAULT_M_LOOKUPID = 0
};

enum MQERROR
{
    MQ_ERROR = -1072824319,
    MQ_ERROR_PROPERTY = -1072824318,
    MQ_ERROR_QUEUE_NOT_FOUND = -1072824317,
    MQ_ERROR_QUEUE_NOT_ACTIVE = -1072824316,
    MQ_ERROR_QUEUE_EXISTS = -1072824315,
    MQ_ERROR_INVALID_PARAMETER = -1072824314,
    MQ_ERROR_INVALID_HANDLE = -1072824313,
    MQ_ERROR_OPERATION_CANCELLED = -1072824312,
    MQ_ERROR_SHARING_VIOLATION = -1072824311,
    MQ_ERROR_SERVICE_NOT_AVAILABLE = -1072824309,
    MQ_ERROR_MACHINE_NOT_FOUND = -1072824307,
    MQ_ERROR_ILLEGAL_SORT = -1072824304,
    MQ_ERROR_ILLEGAL_USER = -1072824303,
    MQ_ERROR_NO_DS = -1072824301,
    MQ_ERROR_ILLEGAL_QUEUE_PATHNAME = -1072824300,
    MQ_ERROR_ILLEGAL_PROPERTY_VALUE = -1072824296,
    MQ_ERROR_ILLEGAL_PROPERTY_VT = -1072824295,
    MQ_ERROR_BUFFER_OVERFLOW = -1072824294,
    MQ_ERROR_IO_TIMEOUT = -1072824293,
    MQ_ERROR_ILLEGAL_CURSOR_ACTION = -1072824292,
    MQ_ERROR_MESSAGE_ALREADY_RECEIVED = -1072824291,
    MQ_ERROR_ILLEGAL_FORMATNAME = -1072824290,
    MQ_ERROR_FORMATNAME_BUFFER_TOO_SMALL = -1072824289,
    MQ_ERROR_UNSUPPORTED_FORMATNAME_OPERATION = -1072824288,
    MQ_ERROR_ILLEGAL_SECURITY_DESCRIPTOR = -1072824287,
    MQ_ERROR_SENDERID_BUFFER_TOO_SMALL = -1072824286,
    MQ_ERROR_SECURITY_DESCRIPTOR_TOO_SMALL = -1072824285,
    MQ_ERROR_CANNOT_IMPERSONATE_CLIENT = -1072824284,
    MQ_ERROR_ACCESS_DENIED = -1072824283,
    MQ_ERROR_PRIVILEGE_NOT_HELD = -1072824282,
    MQ_ERROR_INSUFFICIENT_RESOURCES = -1072824281,
    MQ_ERROR_USER_BUFFER_TOO_SMALL = -1072824280,
    MQ_ERROR_MESSAGE_STORAGE_FAILED = -1072824278,
    MQ_ERROR_SENDER_CERT_BUFFER_TOO_SMALL = -1072824277,
    MQ_ERROR_INVALID_CERTIFICATE = -1072824276,
    MQ_ERROR_CORRUPTED_INTERNAL_CERTIFICATE = -1072824275,
    MQ_ERROR_INTERNAL_USER_CERT_EXIST = -1072824274,
    MQ_ERROR_NO_INTERNAL_USER_CERT = -1072824273,
    MQ_ERROR_CORRUPTED_SECURITY_DATA = -1072824272,
    MQ_ERROR_CORRUPTED_PERSONAL_CERT_STORE = -1072824271,
    MQ_ERROR_COMPUTER_DOES_NOT_SUPPORT_ENCRYPTION = -1072824269,
    MQ_ERROR_BAD_SECURITY_CONTEXT = -1072824267,
    MQ_ERROR_COULD_NOT_GET_USER_SID = -1072824266,
    MQ_ERROR_COULD_NOT_GET_ACCOUNT_INFO = -1072824265,
    MQ_ERROR_ILLEGAL_MQCOLUMNS = -1072824264,
    MQ_ERROR_ILLEGAL_PROPID = -1072824263,
    MQ_ERROR_ILLEGAL_RELATION = -1072824262,
    MQ_ERROR_ILLEGAL_PROPERTY_SIZE = -1072824261,
    MQ_ERROR_ILLEGAL_RESTRICTION_PROPID = -1072824260,
    MQ_ERROR_ILLEGAL_MQQUEUEPROPS = -1072824259,
    MQ_ERROR_PROPERTY_NOTALLOWED = -1072824258,
    MQ_ERROR_INSUFFICIENT_PROPERTIES = -1072824257,
    MQ_ERROR_MACHINE_EXISTS = -1072824256,
    MQ_ERROR_ILLEGAL_MQQMPROPS = -1072824255,
    MQ_ERROR_DS_IS_FULL = -1072824254,
    MQ_ERROR_DS_ERROR = -1072824253,
    MQ_ERROR_INVALID_OWNER = -1072824252,
    MQ_ERROR_UNSUPPORTED_ACCESS_MODE = -1072824251,
    MQ_ERROR_RESULT_BUFFER_TOO_SMALL = -1072824250,
    MQ_ERROR_DELETE_CN_IN_USE = -1072824248,
    MQ_ERROR_NO_RESPONSE_FROM_OBJECT_SERVER = -1072824247,
    MQ_ERROR_OBJECT_SERVER_NOT_AVAILABLE = -1072824246,
    MQ_ERROR_QUEUE_NOT_AVAILABLE = -1072824245,
    MQ_ERROR_DTC_CONNECT = -1072824244,
    MQ_ERROR_TRANSACTION_IMPORT = -1072824242,
    MQ_ERROR_TRANSACTION_USAGE = -1072824240,
    MQ_ERROR_TRANSACTION_SEQUENCE = -1072824239,
    MQ_ERROR_MISSING_CONNECTOR_TYPE = -1072824235,
    MQ_ERROR_STALE_HANDLE = -1072824234,
    MQ_ERROR_TRANSACTION_ENLIST = -1072824232,
    MQ_ERROR_QUEUE_DELETED = -1072824230,
    MQ_ERROR_ILLEGAL_CONTEXT = -1072824229,
    MQ_ERROR_ILLEGAL_SORT_PROPID = -1072824228,
    MQ_ERROR_LABEL_TOO_LONG = -1072824227,
    MQ_ERROR_LABEL_BUFFER_TOO_SMALL = -1072824226,
    MQ_ERROR_MQIS_SERVER_EMPTY = -1072824225,
    MQ_ERROR_MQIS_READONLY_MODE = -1072824224,
    MQ_ERROR_SYMM_KEY_BUFFER_TOO_SMALL = -1072824223,
    MQ_ERROR_SIGNATURE_BUFFER_TOO_SMALL = -1072824222,
    MQ_ERROR_PROV_NAME_BUFFER_TOO_SMALL = -1072824221,
    MQ_ERROR_ILLEGAL_OPERATION = -1072824220,
    MQ_ERROR_WRITE_NOT_ALLOWED = -1072824219,
    MQ_ERROR_WKS_CANT_SERVE_CLIENT = -1072824218,
    MQ_ERROR_DEPEND_WKS_LICENSE_OVERFLOW = -1072824217,
    MQ_CORRUPTED_QUEUE_WAS_DELETED = -1072824216,
    MQ_ERROR_REMOTE_MACHINE_NOT_AVAILABLE = -1072824215,
    MQ_ERROR_UNSUPPORTED_OPERATION = -1072824214,
    MQ_ERROR_ENCRYPTION_PROVIDER_NOT_SUPPORTED = -1072824213,
    MQ_ERROR_CANNOT_SET_CRYPTO_SEC_DESCR = -1072824212,
    MQ_ERROR_CERTIFICATE_NOT_PROVIDED = -1072824211,
    MQ_ERROR_Q_DNS_PROPERTY_NOT_SUPPORTED = -1072824210,
    MQ_ERROR_CANT_CREATE_CERT_STORE = -1072824209,
    MQ_ERROR_CANNOT_CREATE_CERT_STORE = -1072824209,
    MQ_ERROR_CANT_OPEN_CERT_STORE = -1072824208,
    MQ_ERROR_CANNOT_OPEN_CERT_STORE = -1072824208,
    MQ_ERROR_ILLEGAL_ENTERPRISE_OPERATION = -1072824207,
    MQ_ERROR_CANNOT_GRANT_ADD_GUID = -1072824206,
    MQ_ERROR_CANNOT_LOAD_MSMQOCM = -1072824205,
    MQ_ERROR_NO_ENTRY_POINT_MSMQOCM = -1072824204,
    MQ_ERROR_NO_MSMQ_SERVERS_ON_DC = -1072824203,
    MQ_ERROR_CANNOT_JOIN_DOMAIN = -1072824202,
    MQ_ERROR_CANNOT_CREATE_ON_GC = -1072824201,
    MQ_ERROR_GUID_NOT_MATCHING = -1072824200,
    MQ_ERROR_PUBLIC_KEY_NOT_FOUND = -1072824199,
    MQ_ERROR_PUBLIC_KEY_DOES_NOT_EXIST = -1072824198,
    MQ_ERROR_ILLEGAL_MQPRIVATEPROPS = -1072824197,
    MQ_ERROR_NO_GC_IN_DOMAIN = -1072824196,
    MQ_ERROR_NO_MSMQ_SERVERS_ON_GC = -1072824195,
    MQ_ERROR_CANNOT_GET_DN = -1072824194,
    MQ_ERROR_CANNOT_HASH_DATA_EX = -1072824193,
    MQ_ERROR_CANNOT_SIGN_DATA_EX = -1072824192,
    MQ_ERROR_CANNOT_CREATE_HASH_EX = -1072824191,
    MQ_ERROR_FAIL_VERIFY_SIGNATURE_EX = -1072824190,
    MQ_ERROR_CANNOT_DELETE_PSC_OBJECTS = -1072824189,
    MQ_ERROR_NO_MQUSER_OU = -1072824188,
    MQ_ERROR_CANNOT_LOAD_MQAD = -1072824187,
    MQ_ERROR_CANNOT_LOAD_MQDSSRV = -1072824186,
    MQ_ERROR_PROPERTIES_CONFLICT = -1072824185,
    MQ_ERROR_MESSAGE_NOT_FOUND = -1072824184,
    MQ_ERROR_CANT_RESOLVE_SITES = -1072824183,
    MQ_ERROR_NOT_SUPPORTED_BY_DEPENDENT_CLIENTS = -1072824182,
    MQ_ERROR_OPERATION_NOT_SUPPORTED_BY_REMOTE_COMPUTER = -1072824181,
    MQ_ERROR_NOT_A_CORRECT_OBJECT_CLASS = -1072824180,
    MQ_ERROR_MULTI_SORT_KEYS = -1072824179,
    MQ_ERROR_GC_NEEDED = -1072824178,
    MQ_ERROR_DS_BIND_ROOT_FOREST = -1072824177,
    MQ_ERROR_DS_LOCAL_USER = -1072824176,
    MQ_ERROR_Q_ADS_PROPERTY_NOT_SUPPORTED = -1072824175,
    MQ_ERROR_BAD_XML_FORMAT = -1072824174,
    MQ_ERROR_UNSUPPORTED_CLASS = -1072824173,
    MQ_ERROR_UNINITIALIZED_OBJECT = -1072824172,
    MQ_ERROR_CANNOT_CREATE_PSC_OBJECTS = -1072824171,
    MQ_ERROR_CANNOT_UPDATE_PSC_OBJECTS = -1072824170
};

enum MQWARNING
{
    MQ_INFORMATION_PROPERTY = 1074659329,
    MQ_INFORMATION_ILLEGAL_PROPERTY = 1074659330,
    MQ_INFORMATION_PROPERTY_IGNORED = 1074659331,
    MQ_INFORMATION_UNSUPPORTED_PROPERTY = 1074659332,
    MQ_INFORMATION_DUPLICATE_PROPERTY = 1074659333,
    MQ_INFORMATION_OPERATION_PENDING = 1074659334,
    MQ_INFORMATION_FORMATNAME_BUFFER_TOO_SMALL = 1074659337,
    MQ_INFORMATION_INTERNAL_USER_CERT_EXIST = 1074659338,
    MQ_INFORMATION_OWNER_IGNORED = 1074659339
};

struct __declspec(uuid("d7d6e073-dccd-11d0-aa4b-0060970debae"))
MSMQQuery;
    // interface IMSMQQuery
    // interface IMSMQQuery2
    // interface IMSMQQuery3
    // [ default ] interface IMSMQQuery4

struct __declspec(uuid("d7d6e075-dccd-11d0-aa4b-0060970debae"))
MSMQMessage;
    // interface IMSMQMessage
    // interface IMSMQMessage2
    // interface IMSMQMessage3
    // [ default ] interface IMSMQMessage4

struct __declspec(uuid("d7d6e079-dccd-11d0-aa4b-0060970debae"))
MSMQQueue;
    // interface IMSMQQueue
    // interface IMSMQQueue2
    // interface IMSMQQueue3
    // [ default ] interface IMSMQQueue4

struct __declspec(uuid("d7d6e078-dccd-11d0-aa4b-0060970debae"))
_DMSMQEventEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Arrived (
        IDispatch * Queue,
        long Cursor );
    HRESULT ArrivedError (
        IDispatch * Queue,
        long ErrorCode,
        long Cursor );
};

struct __declspec(uuid("d7d6e07a-dccd-11d0-aa4b-0060970debae"))
MSMQEvent;
    // interface IMSMQEvent
    // interface IMSMQEvent2
    // [ default ] interface IMSMQEvent3
    // interface IMSMQPrivateEvent
    // [ default, source ] dispinterface _DMSMQEventEvents

struct __declspec(uuid("d7d6e07c-dccd-11d0-aa4b-0060970debae"))
MSMQQueueInfo;
    // interface IMSMQQueueInfo
    // interface IMSMQQueueInfo2
    // interface IMSMQQueueInfo3
    // [ default ] interface IMSMQQueueInfo4

struct __declspec(uuid("d7d6e07e-dccd-11d0-aa4b-0060970debae"))
MSMQQueueInfos;
    // interface IMSMQQueueInfos
    // interface IMSMQQueueInfos2
    // interface IMSMQQueueInfos3
    // [ default ] interface IMSMQQueueInfos4

struct __declspec(uuid("2ce0c5b0-6e67-11d2-b0e6-00e02c074f6b"))
IMSMQTransaction2 : IMSMQTransaction
{
    //
    // Property data
    //

    __declspec(property(get=GetProperties))
    IDispatchPtr Properties;

    //
    // Wrapper methods for error-handling
    //

    HRESULT InitNew (
        const _variant_t & varTransaction );
    IDispatchPtr GetProperties ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_InitNew (
        /*[in]*/ VARIANT varTransaction ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ IDispatch * * ppcolProperties ) = 0;
};

struct __declspec(uuid("eba96b13-2168-11d3-898c-00e02c074f6b"))
IMSMQTransaction3 : IMSMQTransaction2
{
    //
    // Property data
    //

    __declspec(property(get=GetITransaction))
    _variant_t ITransaction;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetITransaction ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ITransaction (
        /*[out,retval]*/ VARIANT * pvarITransaction ) = 0;
};

struct __declspec(uuid("d7d6e080-dccd-11d0-aa4b-0060970debae"))
MSMQTransaction;
    // interface IMSMQTransaction
    // interface IMSMQTransaction2
    // [ default ] interface IMSMQTransaction3

struct __declspec(uuid("eba96b10-2168-11d3-898c-00e02c074f6b"))
IMSMQCoordinatedTransactionDispenser2 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetProperties))
    IDispatchPtr Properties;

    //
    // Wrapper methods for error-handling
    //

    IMSMQTransaction2Ptr BeginTransaction ( );
    IDispatchPtr GetProperties ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_BeginTransaction (
        /*[out,retval]*/ struct IMSMQTransaction2 * * ptransaction ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ IDispatch * * ppcolProperties ) = 0;
};

struct __declspec(uuid("eba96b14-2168-11d3-898c-00e02c074f6b"))
IMSMQCoordinatedTransactionDispenser3 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetProperties))
    IDispatchPtr Properties;

    //
    // Wrapper methods for error-handling
    //

    IMSMQTransaction3Ptr BeginTransaction ( );
    IDispatchPtr GetProperties ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_BeginTransaction (
        /*[out,retval]*/ struct IMSMQTransaction3 * * ptransaction ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ IDispatch * * ppcolProperties ) = 0;
};

struct __declspec(uuid("d7d6e082-dccd-11d0-aa4b-0060970debae"))
MSMQCoordinatedTransactionDispenser;
    // interface IMSMQCoordinatedTransactionDispenser
    // interface IMSMQCoordinatedTransactionDispenser2
    // [ default ] interface IMSMQCoordinatedTransactionDispenser3

struct __declspec(uuid("eba96b11-2168-11d3-898c-00e02c074f6b"))
IMSMQTransactionDispenser2 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetProperties))
    IDispatchPtr Properties;

    //
    // Wrapper methods for error-handling
    //

    IMSMQTransaction2Ptr BeginTransaction ( );
    IDispatchPtr GetProperties ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_BeginTransaction (
        /*[out,retval]*/ struct IMSMQTransaction2 * * ptransaction ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ IDispatch * * ppcolProperties ) = 0;
};

struct __declspec(uuid("eba96b15-2168-11d3-898c-00e02c074f6b"))
IMSMQTransactionDispenser3 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetProperties))
    IDispatchPtr Properties;

    //
    // Wrapper methods for error-handling
    //

    IMSMQTransaction3Ptr BeginTransaction ( );
    IDispatchPtr GetProperties ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_BeginTransaction (
        /*[out,retval]*/ struct IMSMQTransaction3 * * ptransaction ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ IDispatch * * ppcolProperties ) = 0;
};

struct __declspec(uuid("d7d6e084-dccd-11d0-aa4b-0060970debae"))
MSMQTransactionDispenser;
    // interface IMSMQTransactionDispenser
    // interface IMSMQTransactionDispenser2
    // [ default ] interface IMSMQTransactionDispenser3

struct __declspec(uuid("d7d6e085-dccd-11d0-aa4b-0060970debae"))
IMSMQApplication : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    _bstr_t MachineIdOfMachineName (
        _bstr_t MachineName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_MachineIdOfMachineName (
        /*[in]*/ BSTR MachineName,
        /*[out,retval]*/ BSTR * pbstrGuid ) = 0;
};

struct __declspec(uuid("12a30900-7300-11d2-b0e6-00e02c074f6b"))
IMSMQApplication2 : IMSMQApplication
{
    //
    // Property data
    //

    __declspec(property(get=GetProperties))
    IDispatchPtr Properties;
    __declspec(property(get=GetMSMQVersionMajor))
    short MSMQVersionMajor;
    __declspec(property(get=GetMSMQVersionMinor))
    short MSMQVersionMinor;
    __declspec(property(get=GetMSMQVersionBuild))
    short MSMQVersionBuild;
    __declspec(property(get=GetIsDsEnabled))
    VARIANT_BOOL IsDsEnabled;

    //
    // Wrapper methods for error-handling
    //

    HRESULT RegisterCertificate (
        VARIANT * Flags = &vtMissing,
        VARIANT * ExternalCertificate = &vtMissing );
    _bstr_t MachineNameOfMachineId (
        _bstr_t bstrGuid );
    short GetMSMQVersionMajor ( );
    short GetMSMQVersionMinor ( );
    short GetMSMQVersionBuild ( );
    VARIANT_BOOL GetIsDsEnabled ( );
    IDispatchPtr GetProperties ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_RegisterCertificate (
        /*[in]*/ VARIANT * Flags = &vtMissing,
        /*[in]*/ VARIANT * ExternalCertificate = &vtMissing ) = 0;
      virtual HRESULT __stdcall raw_MachineNameOfMachineId (
        /*[in]*/ BSTR bstrGuid,
        /*[out,retval]*/ BSTR * pbstrMachineName ) = 0;
      virtual HRESULT __stdcall get_MSMQVersionMajor (
        /*[out,retval]*/ short * psMSMQVersionMajor ) = 0;
      virtual HRESULT __stdcall get_MSMQVersionMinor (
        /*[out,retval]*/ short * psMSMQVersionMinor ) = 0;
      virtual HRESULT __stdcall get_MSMQVersionBuild (
        /*[out,retval]*/ short * psMSMQVersionBuild ) = 0;
      virtual HRESULT __stdcall get_IsDsEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pfIsDsEnabled ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ IDispatch * * ppcolProperties ) = 0;
};

struct __declspec(uuid("eba96b1f-2168-11d3-898c-00e02c074f6b"))
IMSMQApplication3 : IMSMQApplication2
{
    //
    // Property data
    //

    __declspec(property(get=GetActiveQueues))
    _variant_t ActiveQueues;
    __declspec(property(get=GetPrivateQueues))
    _variant_t PrivateQueues;
    __declspec(property(get=GetDirectoryServiceServer))
    _bstr_t DirectoryServiceServer;
    __declspec(property(get=GetIsConnected))
    VARIANT_BOOL IsConnected;
    __declspec(property(get=GetBytesInAllQueues))
    _variant_t BytesInAllQueues;
    __declspec(property(get=GetMachine,put=PutMachine))
    _bstr_t Machine;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetActiveQueues ( );
    _variant_t GetPrivateQueues ( );
    _bstr_t GetDirectoryServiceServer ( );
    VARIANT_BOOL GetIsConnected ( );
    _variant_t GetBytesInAllQueues ( );
    void PutMachine (
        _bstr_t pbstrMachine );
    _bstr_t GetMachine ( );
    HRESULT Connect ( );
    HRESULT Disconnect ( );
    HRESULT Tidy ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ActiveQueues (
        /*[out,retval]*/ VARIANT * pvActiveQueues ) = 0;
      virtual HRESULT __stdcall get_PrivateQueues (
        /*[out,retval]*/ VARIANT * pvPrivateQueues ) = 0;
      virtual HRESULT __stdcall get_DirectoryServiceServer (
        /*[out,retval]*/ BSTR * pbstrDirectoryServiceServer ) = 0;
      virtual HRESULT __stdcall get_IsConnected (
        /*[out,retval]*/ VARIANT_BOOL * pfIsConnected ) = 0;
      virtual HRESULT __stdcall get_BytesInAllQueues (
        /*[out,retval]*/ VARIANT * pvBytesInAllQueues ) = 0;
      virtual HRESULT __stdcall put_Machine (
        /*[in]*/ BSTR pbstrMachine ) = 0;
      virtual HRESULT __stdcall get_Machine (
        /*[out,retval]*/ BSTR * pbstrMachine ) = 0;
      virtual HRESULT __stdcall raw_Connect ( ) = 0;
      virtual HRESULT __stdcall raw_Disconnect ( ) = 0;
      virtual HRESULT __stdcall raw_Tidy ( ) = 0;
};

struct __declspec(uuid("d7d6e086-dccd-11d0-aa4b-0060970debae"))
MSMQApplication;
    // interface IMSMQApplication
    // interface IMSMQApplication2
    // [ default ] interface IMSMQApplication3

struct __declspec(uuid("eba96b16-2168-11d3-898c-00e02c074f6b"))
IMSMQDestination : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetProperties))
    IDispatchPtr Properties;
    __declspec(property(get=GetIsOpen))
    VARIANT_BOOL IsOpen;
    __declspec(property(get=GetIADs,put=PutRefIADs))
    IDispatchPtr IADs;
    __declspec(property(get=GetADsPath,put=PutADsPath))
    _bstr_t ADsPath;
    __declspec(property(get=GetPathName,put=PutPathName))
    _bstr_t PathName;
    __declspec(property(get=GetFormatName,put=PutFormatName))
    _bstr_t FormatName;
    __declspec(property(get=GetDestinations,put=PutRefDestinations))
    IDispatchPtr Destinations;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Open ( );
    HRESULT Close ( );
    VARIANT_BOOL GetIsOpen ( );
    IDispatchPtr GetIADs ( );
    void PutRefIADs (
        IDispatch * ppIADs );
    _bstr_t GetADsPath ( );
    void PutADsPath (
        _bstr_t pbstrADsPath );
    _bstr_t GetPathName ( );
    void PutPathName (
        _bstr_t pbstrPathName );
    _bstr_t GetFormatName ( );
    void PutFormatName (
        _bstr_t pbstrFormatName );
    IDispatchPtr GetDestinations ( );
    void PutRefDestinations (
        IDispatch * ppDestinations );
    IDispatchPtr GetProperties ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Open ( ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall get_IsOpen (
        /*[out,retval]*/ VARIANT_BOOL * pfIsOpen ) = 0;
      virtual HRESULT __stdcall get_IADs (
        /*[out,retval]*/ IDispatch * * ppIADs ) = 0;
      virtual HRESULT __stdcall putref_IADs (
        /*[in]*/ IDispatch * ppIADs ) = 0;
      virtual HRESULT __stdcall get_ADsPath (
        /*[out,retval]*/ BSTR * pbstrADsPath ) = 0;
      virtual HRESULT __stdcall put_ADsPath (
        /*[in]*/ BSTR pbstrADsPath ) = 0;
      virtual HRESULT __stdcall get_PathName (
        /*[out,retval]*/ BSTR * pbstrPathName ) = 0;
      virtual HRESULT __stdcall put_PathName (
        /*[in]*/ BSTR pbstrPathName ) = 0;
      virtual HRESULT __stdcall get_FormatName (
        /*[out,retval]*/ BSTR * pbstrFormatName ) = 0;
      virtual HRESULT __stdcall put_FormatName (
        /*[in]*/ BSTR pbstrFormatName ) = 0;
      virtual HRESULT __stdcall get_Destinations (
        /*[out,retval]*/ IDispatch * * ppDestinations ) = 0;
      virtual HRESULT __stdcall putref_Destinations (
        /*[in]*/ IDispatch * ppDestinations ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ IDispatch * * ppcolProperties ) = 0;
};

struct __declspec(uuid("eba96b17-2168-11d3-898c-00e02c074f6b"))
IMSMQPrivateDestination : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHandle,put=PutHandle))
    _variant_t Handle;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetHandle ( );
    void PutHandle (
        const _variant_t & pvarHandle );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Handle (
        /*[out,retval]*/ VARIANT * pvarHandle ) = 0;
      virtual HRESULT __stdcall put_Handle (
        /*[in]*/ VARIANT pvarHandle ) = 0;
};

struct __declspec(uuid("eba96b18-2168-11d3-898c-00e02c074f6b"))
MSMQDestination;
    // [ default ] interface IMSMQDestination
    // interface IMSMQPrivateDestination

struct __declspec(uuid("0188ac2f-ecb3-4173-9779-635ca2039c72"))
IMSMQCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _variant_t Item (
        VARIANT * Index );
    long GetCount ( );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT * Index,
        /*[out,retval]*/ VARIANT * pvarRet ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * ppunk ) = 0;
};

struct __declspec(uuid("f72b9031-2f0c-43e8-924e-e6052cdc493f"))
MSMQCollection;
    // [ default ] interface IMSMQCollection

struct __declspec(uuid("be5f0241-e489-4957-8cc4-a452fcf3e23e"))
IMSMQManagement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFormatName))
    _bstr_t FormatName;
    __declspec(property(get=GetMachine))
    _bstr_t Machine;
    __declspec(property(get=GetMessageCount))
    long MessageCount;
    __declspec(property(get=GetForeignStatus))
    long ForeignStatus;
    __declspec(property(get=GetQueueType))
    long QueueType;
    __declspec(property(get=GetIsLocal))
    VARIANT_BOOL IsLocal;
    __declspec(property(get=GetTransactionalStatus))
    long TransactionalStatus;
    __declspec(property(get=GetBytesInQueue))
    _variant_t BytesInQueue;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        VARIANT * Machine = &vtMissing,
        VARIANT * PathName = &vtMissing,
        VARIANT * FormatName = &vtMissing );
    _bstr_t GetFormatName ( );
    _bstr_t GetMachine ( );
    long GetMessageCount ( );
    long GetForeignStatus ( );
    long GetQueueType ( );
    VARIANT_BOOL GetIsLocal ( );
    long GetTransactionalStatus ( );
    _variant_t GetBytesInQueue ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ VARIANT * Machine = &vtMissing,
        /*[in]*/ VARIANT * PathName = &vtMissing,
        /*[in]*/ VARIANT * FormatName = &vtMissing ) = 0;
      virtual HRESULT __stdcall get_FormatName (
        /*[out,retval]*/ BSTR * pbstrFormatName ) = 0;
      virtual HRESULT __stdcall get_Machine (
        /*[out,retval]*/ BSTR * pbstrMachine ) = 0;
      virtual HRESULT __stdcall get_MessageCount (
        /*[out,retval]*/ long * plMessageCount ) = 0;
      virtual HRESULT __stdcall get_ForeignStatus (
        /*[out,retval]*/ long * plForeignStatus ) = 0;
      virtual HRESULT __stdcall get_QueueType (
        /*[out,retval]*/ long * plQueueType ) = 0;
      virtual HRESULT __stdcall get_IsLocal (
        /*[out,retval]*/ VARIANT_BOOL * pfIsLocal ) = 0;
      virtual HRESULT __stdcall get_TransactionalStatus (
        /*[out,retval]*/ long * plTransactionalStatus ) = 0;
      virtual HRESULT __stdcall get_BytesInQueue (
        /*[out,retval]*/ VARIANT * pvBytesInQueue ) = 0;
};

struct __declspec(uuid("39ce96fe-f4c5-4484-a143-4c2d5d324229"))
MSMQManagement;
    // [ default ] interface IMSMQManagement

struct __declspec(uuid("64c478fb-f9b0-4695-8a7f-439ac94326d3"))
IMSMQOutgoingQueueManagement : IMSMQManagement
{
    //
    // Property data
    //

    __declspec(property(get=GetState))
    long State;
    __declspec(property(get=GetNextHops))
    _variant_t NextHops;

    //
    // Wrapper methods for error-handling
    //

    long GetState ( );
    _variant_t GetNextHops ( );
    IMSMQCollectionPtr EodGetSendInfo ( );
    HRESULT Resume ( );
    HRESULT Pause ( );
    HRESULT EodResend ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_State (
        /*[out,retval]*/ long * plState ) = 0;
      virtual HRESULT __stdcall get_NextHops (
        /*[out,retval]*/ VARIANT * pvNextHops ) = 0;
      virtual HRESULT __stdcall raw_EodGetSendInfo (
        /*[out,retval]*/ struct IMSMQCollection * * ppCollection ) = 0;
      virtual HRESULT __stdcall raw_Resume ( ) = 0;
      virtual HRESULT __stdcall raw_Pause ( ) = 0;
      virtual HRESULT __stdcall raw_EodResend ( ) = 0;
};

struct __declspec(uuid("0188401c-247a-4fed-99c6-bf14119d7055"))
MSMQOutgoingQueueManagement;
    // [ default ] interface IMSMQOutgoingQueueManagement

struct __declspec(uuid("7fbe7759-5760-444d-b8a5-5e7ab9a84cce"))
IMSMQQueueManagement : IMSMQManagement
{
    //
    // Property data
    //

    __declspec(property(get=GetJournalMessageCount))
    long JournalMessageCount;
    __declspec(property(get=GetBytesInJournal))
    _variant_t BytesInJournal;

    //
    // Wrapper methods for error-handling
    //

    long GetJournalMessageCount ( );
    _variant_t GetBytesInJournal ( );
    _variant_t EodGetReceiveInfo ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_JournalMessageCount (
        /*[out,retval]*/ long * plJournalMessageCount ) = 0;
      virtual HRESULT __stdcall get_BytesInJournal (
        /*[out,retval]*/ VARIANT * pvBytesInJournal ) = 0;
      virtual HRESULT __stdcall raw_EodGetReceiveInfo (
        /*[out,retval]*/ VARIANT * pvCollection ) = 0;
};

struct __declspec(uuid("33b6d07e-f27d-42fa-b2d7-bf82e11e9374"))
MSMQQueueManagement;
    // [ default ] interface IMSMQQueueManagement

struct __declspec(uuid("d7d6e072-dccd-11d0-aa4b-0060970debae"))
IMSMQQuery : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IMSMQQueueInfosPtr LookupQueue (
        VARIANT * QueueGuid = &vtMissing,
        VARIANT * ServiceTypeGuid = &vtMissing,
        VARIANT * Label = &vtMissing,
        VARIANT * CreateTime = &vtMissing,
        VARIANT * ModifyTime = &vtMissing,
        VARIANT * RelServiceType = &vtMissing,
        VARIANT * RelLabel = &vtMissing,
        VARIANT * RelCreateTime = &vtMissing,
        VARIANT * RelModifyTime = &vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_LookupQueue (
        /*[in]*/ VARIANT * QueueGuid,
        /*[in]*/ VARIANT * ServiceTypeGuid,
        /*[in]*/ VARIANT * Label,
        /*[in]*/ VARIANT * CreateTime,
        /*[in]*/ VARIANT * ModifyTime,
        /*[in]*/ VARIANT * RelServiceType,
        /*[in]*/ VARIANT * RelLabel,
        /*[in]*/ VARIANT * RelCreateTime,
        /*[in]*/ VARIANT * RelModifyTime,
        /*[out,retval]*/ struct IMSMQQueueInfos * * ppqinfos ) = 0;
};

struct __declspec(uuid("d7d6e07d-dccd-11d0-aa4b-0060970debae"))
IMSMQQueueInfos : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Reset ( );
    IMSMQQueueInfoPtr Next ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall raw_Next (
        /*[out,retval]*/ struct IMSMQQueueInfo * * ppqinfoNext ) = 0;
};

struct __declspec(uuid("d7d6e07b-dccd-11d0-aa4b-0060970debae"))
IMSMQQueueInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetQueueGuid))
    _bstr_t QueueGuid;
    __declspec(property(get=GetServiceTypeGuid,put=PutServiceTypeGuid))
    _bstr_t ServiceTypeGuid;
    __declspec(property(get=GetLabel,put=PutLabel))
    _bstr_t Label;
    __declspec(property(get=GetPathName,put=PutPathName))
    _bstr_t PathName;
    __declspec(property(get=GetFormatName,put=PutFormatName))
    _bstr_t FormatName;
    __declspec(property(get=GetIsTransactional))
    short IsTransactional;
    __declspec(property(get=GetPrivLevel,put=PutPrivLevel))
    long PrivLevel;
    __declspec(property(get=GetJournal,put=PutJournal))
    long Journal;
    __declspec(property(get=GetBasePriority,put=PutBasePriority))
    long BasePriority;
    __declspec(property(get=GetCreateTime))
    _variant_t CreateTime;
    __declspec(property(get=GetModifyTime))
    _variant_t ModifyTime;
    __declspec(property(get=GetAuthenticate,put=PutAuthenticate))
    long Authenticate;
    __declspec(property(get=GetQuota,put=PutQuota))
    long Quota;
    __declspec(property(get=GetJournalQuota,put=PutJournalQuota))
    long JournalQuota;
    __declspec(property(get=GetIsWorldReadable))
    short IsWorldReadable;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetQueueGuid ( );
    _bstr_t GetServiceTypeGuid ( );
    void PutServiceTypeGuid (
        _bstr_t pbstrGuidServiceType );
    _bstr_t GetLabel ( );
    void PutLabel (
        _bstr_t pbstrLabel );
    _bstr_t GetPathName ( );
    void PutPathName (
        _bstr_t pbstrPathName );
    _bstr_t GetFormatName ( );
    void PutFormatName (
        _bstr_t pbstrFormatName );
    short GetIsTransactional ( );
    long GetPrivLevel ( );
    void PutPrivLevel (
        long plPrivLevel );
    long GetJournal ( );
    void PutJournal (
        long plJournal );
    long GetQuota ( );
    void PutQuota (
        long plQuota );
    long GetBasePriority ( );
    void PutBasePriority (
        long plBasePriority );
    _variant_t GetCreateTime ( );
    _variant_t GetModifyTime ( );
    long GetAuthenticate ( );
    void PutAuthenticate (
        long plAuthenticate );
    long GetJournalQuota ( );
    void PutJournalQuota (
        long plJournalQuota );
    short GetIsWorldReadable ( );
    HRESULT Create (
        VARIANT * IsTransactional = &vtMissing,
        VARIANT * IsWorldReadable = &vtMissing );
    HRESULT Delete ( );
    IMSMQQueuePtr Open (
        long Access,
        long ShareMode );
    HRESULT Refresh ( );
    HRESULT Update ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_QueueGuid (
        /*[out,retval]*/ BSTR * pbstrGuidQueue ) = 0;
      virtual HRESULT __stdcall get_ServiceTypeGuid (
        /*[out,retval]*/ BSTR * pbstrGuidServiceType ) = 0;
      virtual HRESULT __stdcall put_ServiceTypeGuid (
        /*[in]*/ BSTR pbstrGuidServiceType ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ BSTR * pbstrLabel ) = 0;
      virtual HRESULT __stdcall put_Label (
        /*[in]*/ BSTR pbstrLabel ) = 0;
      virtual HRESULT __stdcall get_PathName (
        /*[out,retval]*/ BSTR * pbstrPathName ) = 0;
      virtual HRESULT __stdcall put_PathName (
        /*[in]*/ BSTR pbstrPathName ) = 0;
      virtual HRESULT __stdcall get_FormatName (
        /*[out,retval]*/ BSTR * pbstrFormatName ) = 0;
      virtual HRESULT __stdcall put_FormatName (
        /*[in]*/ BSTR pbstrFormatName ) = 0;
      virtual HRESULT __stdcall get_IsTransactional (
        /*[out,retval]*/ short * pisTransactional ) = 0;
      virtual HRESULT __stdcall get_PrivLevel (
        /*[out,retval]*/ long * plPrivLevel ) = 0;
      virtual HRESULT __stdcall put_PrivLevel (
        /*[in]*/ long plPrivLevel ) = 0;
      virtual HRESULT __stdcall get_Journal (
        /*[out,retval]*/ long * plJournal ) = 0;
      virtual HRESULT __stdcall put_Journal (
        /*[in]*/ long plJournal ) = 0;
      virtual HRESULT __stdcall get_Quota (
        /*[out,retval]*/ long * plQuota ) = 0;
      virtual HRESULT __stdcall put_Quota (
        /*[in]*/ long plQuota ) = 0;
      virtual HRESULT __stdcall get_BasePriority (
        /*[out,retval]*/ long * plBasePriority ) = 0;
      virtual HRESULT __stdcall put_BasePriority (
        /*[in]*/ long plBasePriority ) = 0;
      virtual HRESULT __stdcall get_CreateTime (
        /*[out,retval]*/ VARIANT * pvarCreateTime ) = 0;
      virtual HRESULT __stdcall get_ModifyTime (
        /*[out,retval]*/ VARIANT * pvarModifyTime ) = 0;
      virtual HRESULT __stdcall get_Authenticate (
        /*[out,retval]*/ long * plAuthenticate ) = 0;
      virtual HRESULT __stdcall put_Authenticate (
        /*[in]*/ long plAuthenticate ) = 0;
      virtual HRESULT __stdcall get_JournalQuota (
        /*[out,retval]*/ long * plJournalQuota ) = 0;
      virtual HRESULT __stdcall put_JournalQuota (
        /*[in]*/ long plJournalQuota ) = 0;
      virtual HRESULT __stdcall get_IsWorldReadable (
        /*[out,retval]*/ short * pisWorldReadable ) = 0;
      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ VARIANT * IsTransactional = &vtMissing,
        /*[in]*/ VARIANT * IsWorldReadable = &vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Open (
        /*[in]*/ long Access,
        /*[in]*/ long ShareMode,
        /*[out,retval]*/ struct IMSMQQueue * * ppq ) = 0;
      virtual HRESULT __stdcall raw_Refresh ( ) = 0;
      virtual HRESULT __stdcall raw_Update ( ) = 0;
};

struct __declspec(uuid("d7d6e076-dccd-11d0-aa4b-0060970debae"))
IMSMQQueue : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHandle))
    long Handle;
    __declspec(property(get=GetAccess))
    long Access;
    __declspec(property(get=GetShareMode))
    long ShareMode;
    __declspec(property(get=GetQueueInfo))
    IMSMQQueueInfoPtr QueueInfo;
    __declspec(property(get=GetIsOpen))
    short IsOpen;

    //
    // Wrapper methods for error-handling
    //

    long GetAccess ( );
    long GetShareMode ( );
    IMSMQQueueInfoPtr GetQueueInfo ( );
    long GetHandle ( );
    short GetIsOpen ( );
    HRESULT Close ( );
    IMSMQMessagePtr Receive (
        VARIANT * Transaction = &vtMissing,
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing );
    IMSMQMessagePtr Peek (
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing );
    HRESULT EnableNotification (
        struct IMSMQEvent * Event,
        VARIANT * Cursor = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing );
    HRESULT Reset ( );
    IMSMQMessagePtr ReceiveCurrent (
        VARIANT * Transaction = &vtMissing,
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing );
    IMSMQMessagePtr PeekNext (
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing );
    IMSMQMessagePtr PeekCurrent (
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Access (
        /*[out,retval]*/ long * plAccess ) = 0;
      virtual HRESULT __stdcall get_ShareMode (
        /*[out,retval]*/ long * plShareMode ) = 0;
      virtual HRESULT __stdcall get_QueueInfo (
        /*[out,retval]*/ struct IMSMQQueueInfo * * ppqinfo ) = 0;
      virtual HRESULT __stdcall get_Handle (
        /*[out,retval]*/ long * plHandle ) = 0;
      virtual HRESULT __stdcall get_IsOpen (
        /*[out,retval]*/ short * pisOpen ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall raw_Receive (
        /*[in]*/ VARIANT * Transaction,
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * ReceiveTimeout,
        /*[out,retval]*/ struct IMSMQMessage * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_Peek (
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * ReceiveTimeout,
        /*[out,retval]*/ struct IMSMQMessage * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_EnableNotification (
        /*[in]*/ struct IMSMQEvent * Event,
        /*[in]*/ VARIANT * Cursor = &vtMissing,
        /*[in]*/ VARIANT * ReceiveTimeout = &vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall raw_ReceiveCurrent (
        /*[in]*/ VARIANT * Transaction,
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * ReceiveTimeout,
        /*[out,retval]*/ struct IMSMQMessage * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_PeekNext (
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * ReceiveTimeout,
        /*[out,retval]*/ struct IMSMQMessage * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_PeekCurrent (
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * ReceiveTimeout,
        /*[out,retval]*/ struct IMSMQMessage * * ppmsg ) = 0;
};

struct __declspec(uuid("d7d6e074-dccd-11d0-aa4b-0060970debae"))
IMSMQMessage : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBody,put=PutBody))
    _variant_t Body;
    __declspec(property(get=GetDelivery,put=PutDelivery))
    long Delivery;
    __declspec(property(get=GetPriority,put=PutPriority))
    long Priority;
    __declspec(property(get=GetJournal,put=PutJournal))
    long Journal;
    __declspec(property(get=GetResponseQueueInfo,put=PutRefResponseQueueInfo))
    IMSMQQueueInfoPtr ResponseQueueInfo;
    __declspec(property(get=GetAppSpecific,put=PutAppSpecific))
    long AppSpecific;
    __declspec(property(get=GetSourceMachineGuid))
    _bstr_t SourceMachineGuid;
    __declspec(property(get=GetClass))
    long Class;
    __declspec(property(get=GetAdminQueueInfo,put=PutRefAdminQueueInfo))
    IMSMQQueueInfoPtr AdminQueueInfo;
    __declspec(property(get=GetId))
    _variant_t Id;
    __declspec(property(get=GetCorrelationId,put=PutCorrelationId))
    _variant_t CorrelationId;
    __declspec(property(get=GetAck,put=PutAck))
    long Ack;
    __declspec(property(get=GetLabel,put=PutLabel))
    _bstr_t Label;
    __declspec(property(get=GetBodyLength))
    long BodyLength;
    __declspec(property(get=GetMaxTimeToReachQueue,put=PutMaxTimeToReachQueue))
    long MaxTimeToReachQueue;
    __declspec(property(get=GetMaxTimeToReceive,put=PutMaxTimeToReceive))
    long MaxTimeToReceive;
    __declspec(property(get=GetEncryptAlgorithm,put=PutEncryptAlgorithm))
    long EncryptAlgorithm;
    __declspec(property(get=GetHashAlgorithm,put=PutHashAlgorithm))
    long HashAlgorithm;
    __declspec(property(get=GetSentTime))
    _variant_t SentTime;
    __declspec(property(get=GetArrivedTime))
    _variant_t ArrivedTime;
    __declspec(property(get=GetDestinationQueueInfo))
    IMSMQQueueInfoPtr DestinationQueueInfo;
    __declspec(property(get=GetSenderCertificate,put=PutSenderCertificate))
    _variant_t SenderCertificate;
    __declspec(property(get=GetSenderId))
    _variant_t SenderId;
    __declspec(property(get=GetSenderIdType,put=PutSenderIdType))
    long SenderIdType;
    __declspec(property(get=GetTrace,put=PutTrace))
    long Trace;
    __declspec(property(get=GetPrivLevel,put=PutPrivLevel))
    long PrivLevel;
    __declspec(property(get=GetAuthLevel,put=PutAuthLevel))
    long AuthLevel;
    __declspec(property(get=GetIsAuthenticated))
    short IsAuthenticated;

    //
    // Wrapper methods for error-handling
    //

    long GetClass ( );
    long GetPrivLevel ( );
    void PutPrivLevel (
        long plPrivLevel );
    long GetAuthLevel ( );
    void PutAuthLevel (
        long plAuthLevel );
    short GetIsAuthenticated ( );
    long GetDelivery ( );
    void PutDelivery (
        long plDelivery );
    long GetTrace ( );
    void PutTrace (
        long plTrace );
    long GetPriority ( );
    void PutPriority (
        long plPriority );
    long GetJournal ( );
    void PutJournal (
        long plJournal );
    IMSMQQueueInfoPtr GetResponseQueueInfo ( );
    void PutRefResponseQueueInfo (
        struct IMSMQQueueInfo * ppqinfoResponse );
    long GetAppSpecific ( );
    void PutAppSpecific (
        long plAppSpecific );
    _bstr_t GetSourceMachineGuid ( );
    long GetBodyLength ( );
    _variant_t GetBody ( );
    void PutBody (
        const _variant_t & pvarBody );
    IMSMQQueueInfoPtr GetAdminQueueInfo ( );
    void PutRefAdminQueueInfo (
        struct IMSMQQueueInfo * ppqinfoAdmin );
    _variant_t GetId ( );
    _variant_t GetCorrelationId ( );
    void PutCorrelationId (
        const _variant_t & pvarMsgId );
    long GetAck ( );
    void PutAck (
        long plAck );
    _bstr_t GetLabel ( );
    void PutLabel (
        _bstr_t pbstrLabel );
    long GetMaxTimeToReachQueue ( );
    void PutMaxTimeToReachQueue (
        long plMaxTimeToReachQueue );
    long GetMaxTimeToReceive ( );
    void PutMaxTimeToReceive (
        long plMaxTimeToReceive );
    long GetHashAlgorithm ( );
    void PutHashAlgorithm (
        long plHashAlg );
    long GetEncryptAlgorithm ( );
    void PutEncryptAlgorithm (
        long plEncryptAlg );
    _variant_t GetSentTime ( );
    _variant_t GetArrivedTime ( );
    IMSMQQueueInfoPtr GetDestinationQueueInfo ( );
    _variant_t GetSenderCertificate ( );
    void PutSenderCertificate (
        const _variant_t & pvarSenderCert );
    _variant_t GetSenderId ( );
    long GetSenderIdType ( );
    void PutSenderIdType (
        long plSenderIdType );
    HRESULT Send (
        struct IMSMQQueue * DestinationQueue,
        VARIANT * Transaction = &vtMissing );
    HRESULT AttachCurrentSecurityContext ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Class (
        /*[out,retval]*/ long * plClass ) = 0;
      virtual HRESULT __stdcall get_PrivLevel (
        /*[out,retval]*/ long * plPrivLevel ) = 0;
      virtual HRESULT __stdcall put_PrivLevel (
        /*[in]*/ long plPrivLevel ) = 0;
      virtual HRESULT __stdcall get_AuthLevel (
        /*[out,retval]*/ long * plAuthLevel ) = 0;
      virtual HRESULT __stdcall put_AuthLevel (
        /*[in]*/ long plAuthLevel ) = 0;
      virtual HRESULT __stdcall get_IsAuthenticated (
        /*[out,retval]*/ short * pisAuthenticated ) = 0;
      virtual HRESULT __stdcall get_Delivery (
        /*[out,retval]*/ long * plDelivery ) = 0;
      virtual HRESULT __stdcall put_Delivery (
        /*[in]*/ long plDelivery ) = 0;
      virtual HRESULT __stdcall get_Trace (
        /*[out,retval]*/ long * plTrace ) = 0;
      virtual HRESULT __stdcall put_Trace (
        /*[in]*/ long plTrace ) = 0;
      virtual HRESULT __stdcall get_Priority (
        /*[out,retval]*/ long * plPriority ) = 0;
      virtual HRESULT __stdcall put_Priority (
        /*[in]*/ long plPriority ) = 0;
      virtual HRESULT __stdcall get_Journal (
        /*[out,retval]*/ long * plJournal ) = 0;
      virtual HRESULT __stdcall put_Journal (
        /*[in]*/ long plJournal ) = 0;
      virtual HRESULT __stdcall get_ResponseQueueInfo (
        /*[out,retval]*/ struct IMSMQQueueInfo * * ppqinfoResponse ) = 0;
      virtual HRESULT __stdcall putref_ResponseQueueInfo (
        /*[in]*/ struct IMSMQQueueInfo * ppqinfoResponse ) = 0;
      virtual HRESULT __stdcall get_AppSpecific (
        /*[out,retval]*/ long * plAppSpecific ) = 0;
      virtual HRESULT __stdcall put_AppSpecific (
        /*[in]*/ long plAppSpecific ) = 0;
      virtual HRESULT __stdcall get_SourceMachineGuid (
        /*[out,retval]*/ BSTR * pbstrGuidSrcMachine ) = 0;
      virtual HRESULT __stdcall get_BodyLength (
        /*[out,retval]*/ long * pcbBody ) = 0;
      virtual HRESULT __stdcall get_Body (
        /*[out,retval]*/ VARIANT * pvarBody ) = 0;
      virtual HRESULT __stdcall put_Body (
        /*[in]*/ VARIANT pvarBody ) = 0;
      virtual HRESULT __stdcall get_AdminQueueInfo (
        /*[out,retval]*/ struct IMSMQQueueInfo * * ppqinfoAdmin ) = 0;
      virtual HRESULT __stdcall putref_AdminQueueInfo (
        /*[in]*/ struct IMSMQQueueInfo * ppqinfoAdmin ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ VARIANT * pvarMsgId ) = 0;
      virtual HRESULT __stdcall get_CorrelationId (
        /*[out,retval]*/ VARIANT * pvarMsgId ) = 0;
      virtual HRESULT __stdcall put_CorrelationId (
        /*[in]*/ VARIANT pvarMsgId ) = 0;
      virtual HRESULT __stdcall get_Ack (
        /*[out,retval]*/ long * plAck ) = 0;
      virtual HRESULT __stdcall put_Ack (
        /*[in]*/ long plAck ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ BSTR * pbstrLabel ) = 0;
      virtual HRESULT __stdcall put_Label (
        /*[in]*/ BSTR pbstrLabel ) = 0;
      virtual HRESULT __stdcall get_MaxTimeToReachQueue (
        /*[out,retval]*/ long * plMaxTimeToReachQueue ) = 0;
      virtual HRESULT __stdcall put_MaxTimeToReachQueue (
        /*[in]*/ long plMaxTimeToReachQueue ) = 0;
      virtual HRESULT __stdcall get_MaxTimeToReceive (
        /*[out,retval]*/ long * plMaxTimeToReceive ) = 0;
      virtual HRESULT __stdcall put_MaxTimeToReceive (
        /*[in]*/ long plMaxTimeToReceive ) = 0;
      virtual HRESULT __stdcall get_HashAlgorithm (
        /*[out,retval]*/ long * plHashAlg ) = 0;
      virtual HRESULT __stdcall put_HashAlgorithm (
        /*[in]*/ long plHashAlg ) = 0;
      virtual HRESULT __stdcall get_EncryptAlgorithm (
        /*[out,retval]*/ long * plEncryptAlg ) = 0;
      virtual HRESULT __stdcall put_EncryptAlgorithm (
        /*[in]*/ long plEncryptAlg ) = 0;
      virtual HRESULT __stdcall get_SentTime (
        /*[out,retval]*/ VARIANT * pvarSentTime ) = 0;
      virtual HRESULT __stdcall get_ArrivedTime (
        /*[out,retval]*/ VARIANT * plArrivedTime ) = 0;
      virtual HRESULT __stdcall get_DestinationQueueInfo (
        /*[out,retval]*/ struct IMSMQQueueInfo * * ppqinfoDest ) = 0;
      virtual HRESULT __stdcall get_SenderCertificate (
        /*[out,retval]*/ VARIANT * pvarSenderCert ) = 0;
      virtual HRESULT __stdcall put_SenderCertificate (
        /*[in]*/ VARIANT pvarSenderCert ) = 0;
      virtual HRESULT __stdcall get_SenderId (
        /*[out,retval]*/ VARIANT * pvarSenderId ) = 0;
      virtual HRESULT __stdcall get_SenderIdType (
        /*[out,retval]*/ long * plSenderIdType ) = 0;
      virtual HRESULT __stdcall put_SenderIdType (
        /*[in]*/ long plSenderIdType ) = 0;
      virtual HRESULT __stdcall raw_Send (
        /*[in]*/ struct IMSMQQueue * DestinationQueue,
        /*[in]*/ VARIANT * Transaction = &vtMissing ) = 0;
      virtual HRESULT __stdcall raw_AttachCurrentSecurityContext ( ) = 0;
};

struct __declspec(uuid("d7ab3341-c9d3-11d1-bb47-0080c7c5a2c0"))
IMSMQPrivateEvent : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHwnd))
    long Hwnd;

    //
    // Wrapper methods for error-handling
    //

    long GetHwnd ( );
    HRESULT FireArrivedEvent (
        struct IMSMQQueue * pq,
        long msgcursor );
    HRESULT FireArrivedErrorEvent (
        struct IMSMQQueue * pq,
        HRESULT hrStatus,
        long msgcursor );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Hwnd (
        /*[out,retval]*/ long * phwnd ) = 0;
      virtual HRESULT __stdcall raw_FireArrivedEvent (
        /*[in]*/ struct IMSMQQueue * pq,
        /*[in]*/ long msgcursor ) = 0;
      virtual HRESULT __stdcall raw_FireArrivedErrorEvent (
        /*[in]*/ struct IMSMQQueue * pq,
        /*[in]*/ HRESULT hrStatus,
        /*[in]*/ long msgcursor ) = 0;
};

struct __declspec(uuid("fd174a80-89cf-11d2-b0f2-00e02c074f6b"))
IMSMQQueueInfo2 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetQueueGuid))
    _bstr_t QueueGuid;
    __declspec(property(get=GetServiceTypeGuid,put=PutServiceTypeGuid))
    _bstr_t ServiceTypeGuid;
    __declspec(property(get=GetLabel,put=PutLabel))
    _bstr_t Label;
    __declspec(property(get=GetPathName,put=PutPathName))
    _bstr_t PathName;
    __declspec(property(get=GetFormatName,put=PutFormatName))
    _bstr_t FormatName;
    __declspec(property(get=GetIsTransactional))
    short IsTransactional;
    __declspec(property(get=GetPrivLevel,put=PutPrivLevel))
    long PrivLevel;
    __declspec(property(get=GetJournal,put=PutJournal))
    long Journal;
    __declspec(property(get=GetBasePriority,put=PutBasePriority))
    long BasePriority;
    __declspec(property(get=GetCreateTime))
    _variant_t CreateTime;
    __declspec(property(get=GetModifyTime))
    _variant_t ModifyTime;
    __declspec(property(get=GetAuthenticate,put=PutAuthenticate))
    long Authenticate;
    __declspec(property(get=GetQuota,put=PutQuota))
    long Quota;
    __declspec(property(get=GetJournalQuota,put=PutJournalQuota))
    long JournalQuota;
    __declspec(property(get=GetIsWorldReadable))
    short IsWorldReadable;
    __declspec(property(get=GetPathNameDNS))
    _bstr_t PathNameDNS;
    __declspec(property(get=GetProperties))
    IDispatchPtr Properties;
    __declspec(property(get=GetSecurity,put=PutSecurity))
    _variant_t Security;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetQueueGuid ( );
    _bstr_t GetServiceTypeGuid ( );
    void PutServiceTypeGuid (
        _bstr_t pbstrGuidServiceType );
    _bstr_t GetLabel ( );
    void PutLabel (
        _bstr_t pbstrLabel );
    _bstr_t GetPathName ( );
    void PutPathName (
        _bstr_t pbstrPathName );
    _bstr_t GetFormatName ( );
    void PutFormatName (
        _bstr_t pbstrFormatName );
    short GetIsTransactional ( );
    long GetPrivLevel ( );
    void PutPrivLevel (
        long plPrivLevel );
    long GetJournal ( );
    void PutJournal (
        long plJournal );
    long GetQuota ( );
    void PutQuota (
        long plQuota );
    long GetBasePriority ( );
    void PutBasePriority (
        long plBasePriority );
    _variant_t GetCreateTime ( );
    _variant_t GetModifyTime ( );
    long GetAuthenticate ( );
    void PutAuthenticate (
        long plAuthenticate );
    long GetJournalQuota ( );
    void PutJournalQuota (
        long plJournalQuota );
    short GetIsWorldReadable ( );
    HRESULT Create (
        VARIANT * IsTransactional = &vtMissing,
        VARIANT * IsWorldReadable = &vtMissing );
    HRESULT Delete ( );
    IMSMQQueue2Ptr Open (
        long Access,
        long ShareMode );
    HRESULT Refresh ( );
    HRESULT Update ( );
    _bstr_t GetPathNameDNS ( );
    IDispatchPtr GetProperties ( );
    _variant_t GetSecurity ( );
    void PutSecurity (
        const _variant_t & pvarSecurity );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_QueueGuid (
        /*[out,retval]*/ BSTR * pbstrGuidQueue ) = 0;
      virtual HRESULT __stdcall get_ServiceTypeGuid (
        /*[out,retval]*/ BSTR * pbstrGuidServiceType ) = 0;
      virtual HRESULT __stdcall put_ServiceTypeGuid (
        /*[in]*/ BSTR pbstrGuidServiceType ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ BSTR * pbstrLabel ) = 0;
      virtual HRESULT __stdcall put_Label (
        /*[in]*/ BSTR pbstrLabel ) = 0;
      virtual HRESULT __stdcall get_PathName (
        /*[out,retval]*/ BSTR * pbstrPathName ) = 0;
      virtual HRESULT __stdcall put_PathName (
        /*[in]*/ BSTR pbstrPathName ) = 0;
      virtual HRESULT __stdcall get_FormatName (
        /*[out,retval]*/ BSTR * pbstrFormatName ) = 0;
      virtual HRESULT __stdcall put_FormatName (
        /*[in]*/ BSTR pbstrFormatName ) = 0;
      virtual HRESULT __stdcall get_IsTransactional (
        /*[out,retval]*/ short * pisTransactional ) = 0;
      virtual HRESULT __stdcall get_PrivLevel (
        /*[out,retval]*/ long * plPrivLevel ) = 0;
      virtual HRESULT __stdcall put_PrivLevel (
        /*[in]*/ long plPrivLevel ) = 0;
      virtual HRESULT __stdcall get_Journal (
        /*[out,retval]*/ long * plJournal ) = 0;
      virtual HRESULT __stdcall put_Journal (
        /*[in]*/ long plJournal ) = 0;
      virtual HRESULT __stdcall get_Quota (
        /*[out,retval]*/ long * plQuota ) = 0;
      virtual HRESULT __stdcall put_Quota (
        /*[in]*/ long plQuota ) = 0;
      virtual HRESULT __stdcall get_BasePriority (
        /*[out,retval]*/ long * plBasePriority ) = 0;
      virtual HRESULT __stdcall put_BasePriority (
        /*[in]*/ long plBasePriority ) = 0;
      virtual HRESULT __stdcall get_CreateTime (
        /*[out,retval]*/ VARIANT * pvarCreateTime ) = 0;
      virtual HRESULT __stdcall get_ModifyTime (
        /*[out,retval]*/ VARIANT * pvarModifyTime ) = 0;
      virtual HRESULT __stdcall get_Authenticate (
        /*[out,retval]*/ long * plAuthenticate ) = 0;
      virtual HRESULT __stdcall put_Authenticate (
        /*[in]*/ long plAuthenticate ) = 0;
      virtual HRESULT __stdcall get_JournalQuota (
        /*[out,retval]*/ long * plJournalQuota ) = 0;
      virtual HRESULT __stdcall put_JournalQuota (
        /*[in]*/ long plJournalQuota ) = 0;
      virtual HRESULT __stdcall get_IsWorldReadable (
        /*[out,retval]*/ short * pisWorldReadable ) = 0;
      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ VARIANT * IsTransactional = &vtMissing,
        /*[in]*/ VARIANT * IsWorldReadable = &vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Open (
        /*[in]*/ long Access,
        /*[in]*/ long ShareMode,
        /*[out,retval]*/ struct IMSMQQueue2 * * ppq ) = 0;
      virtual HRESULT __stdcall raw_Refresh ( ) = 0;
      virtual HRESULT __stdcall raw_Update ( ) = 0;
      virtual HRESULT __stdcall get_PathNameDNS (
        /*[out,retval]*/ BSTR * pbstrPathNameDNS ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ IDispatch * * ppcolProperties ) = 0;
      virtual HRESULT __stdcall get_Security (
        /*[out,retval]*/ VARIANT * pvarSecurity ) = 0;
      virtual HRESULT __stdcall put_Security (
        /*[in]*/ VARIANT pvarSecurity ) = 0;
};

struct __declspec(uuid("eba96b0f-2168-11d3-898c-00e02c074f6b"))
IMSMQQueueInfos2 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetProperties))
    IDispatchPtr Properties;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Reset ( );
    IMSMQQueueInfo2Ptr Next ( );
    IDispatchPtr GetProperties ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall raw_Next (
        /*[out,retval]*/ struct IMSMQQueueInfo2 * * ppqinfoNext ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ IDispatch * * ppcolProperties ) = 0;
};

struct __declspec(uuid("eba96b0e-2168-11d3-898c-00e02c074f6b"))
IMSMQQuery2 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetProperties))
    IDispatchPtr Properties;

    //
    // Wrapper methods for error-handling
    //

    IMSMQQueueInfos2Ptr LookupQueue (
        VARIANT * QueueGuid = &vtMissing,
        VARIANT * ServiceTypeGuid = &vtMissing,
        VARIANT * Label = &vtMissing,
        VARIANT * CreateTime = &vtMissing,
        VARIANT * ModifyTime = &vtMissing,
        VARIANT * RelServiceType = &vtMissing,
        VARIANT * RelLabel = &vtMissing,
        VARIANT * RelCreateTime = &vtMissing,
        VARIANT * RelModifyTime = &vtMissing );
    IDispatchPtr GetProperties ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_LookupQueue (
        /*[in]*/ VARIANT * QueueGuid,
        /*[in]*/ VARIANT * ServiceTypeGuid,
        /*[in]*/ VARIANT * Label,
        /*[in]*/ VARIANT * CreateTime,
        /*[in]*/ VARIANT * ModifyTime,
        /*[in]*/ VARIANT * RelServiceType,
        /*[in]*/ VARIANT * RelLabel,
        /*[in]*/ VARIANT * RelCreateTime,
        /*[in]*/ VARIANT * RelModifyTime,
        /*[out,retval]*/ struct IMSMQQueueInfos2 * * ppqinfos ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ IDispatch * * ppcolProperties ) = 0;
};

struct __declspec(uuid("ef0574e0-06d8-11d3-b100-00e02c074f6b"))
IMSMQQueue2 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHandle))
    long Handle;
    __declspec(property(get=GetAccess))
    long Access;
    __declspec(property(get=GetShareMode))
    long ShareMode;
    __declspec(property(get=GetQueueInfo))
    IMSMQQueueInfo2Ptr QueueInfo;
    __declspec(property(get=GetIsOpen))
    short IsOpen;
    __declspec(property(get=GetProperties))
    IDispatchPtr Properties;

    //
    // Wrapper methods for error-handling
    //

    long GetAccess ( );
    long GetShareMode ( );
    IMSMQQueueInfo2Ptr GetQueueInfo ( );
    long GetHandle ( );
    short GetIsOpen ( );
    HRESULT Close ( );
    IMSMQMessagePtr Receive_v1 (
        VARIANT * Transaction = &vtMissing,
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing );
    IMSMQMessagePtr Peek_v1 (
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing );
    HRESULT EnableNotification (
        struct IMSMQEvent2 * Event,
        VARIANT * Cursor = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing );
    HRESULT Reset ( );
    IMSMQMessagePtr ReceiveCurrent_v1 (
        VARIANT * Transaction = &vtMissing,
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing );
    IMSMQMessagePtr PeekNext_v1 (
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing );
    IMSMQMessagePtr PeekCurrent_v1 (
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing );
    IMSMQMessage2Ptr Receive (
        VARIANT * Transaction = &vtMissing,
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing,
        VARIANT * WantConnectorType = &vtMissing );
    IMSMQMessage2Ptr Peek (
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing,
        VARIANT * WantConnectorType = &vtMissing );
    IMSMQMessage2Ptr ReceiveCurrent (
        VARIANT * Transaction = &vtMissing,
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing,
        VARIANT * WantConnectorType = &vtMissing );
    IMSMQMessage2Ptr PeekNext (
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing,
        VARIANT * WantConnectorType = &vtMissing );
    IMSMQMessage2Ptr PeekCurrent (
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing,
        VARIANT * WantConnectorType = &vtMissing );
    IDispatchPtr GetProperties ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Access (
        /*[out,retval]*/ long * plAccess ) = 0;
      virtual HRESULT __stdcall get_ShareMode (
        /*[out,retval]*/ long * plShareMode ) = 0;
      virtual HRESULT __stdcall get_QueueInfo (
        /*[out,retval]*/ struct IMSMQQueueInfo2 * * ppqinfo ) = 0;
      virtual HRESULT __stdcall get_Handle (
        /*[out,retval]*/ long * plHandle ) = 0;
      virtual HRESULT __stdcall get_IsOpen (
        /*[out,retval]*/ short * pisOpen ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall raw_Receive_v1 (
        /*[in]*/ VARIANT * Transaction,
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * ReceiveTimeout,
        /*[out,retval]*/ struct IMSMQMessage * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_Peek_v1 (
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * ReceiveTimeout,
        /*[out,retval]*/ struct IMSMQMessage * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_EnableNotification (
        /*[in]*/ struct IMSMQEvent2 * Event,
        /*[in]*/ VARIANT * Cursor = &vtMissing,
        /*[in]*/ VARIANT * ReceiveTimeout = &vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall raw_ReceiveCurrent_v1 (
        /*[in]*/ VARIANT * Transaction,
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * ReceiveTimeout,
        /*[out,retval]*/ struct IMSMQMessage * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_PeekNext_v1 (
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * ReceiveTimeout,
        /*[out,retval]*/ struct IMSMQMessage * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_PeekCurrent_v1 (
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * ReceiveTimeout,
        /*[out,retval]*/ struct IMSMQMessage * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_Receive (
        /*[in]*/ VARIANT * Transaction,
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * ReceiveTimeout,
        /*[in]*/ VARIANT * WantConnectorType,
        /*[out,retval]*/ struct IMSMQMessage2 * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_Peek (
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * ReceiveTimeout,
        /*[in]*/ VARIANT * WantConnectorType,
        /*[out,retval]*/ struct IMSMQMessage2 * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_ReceiveCurrent (
        /*[in]*/ VARIANT * Transaction,
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * ReceiveTimeout,
        /*[in]*/ VARIANT * WantConnectorType,
        /*[out,retval]*/ struct IMSMQMessage2 * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_PeekNext (
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * ReceiveTimeout,
        /*[in]*/ VARIANT * WantConnectorType,
        /*[out,retval]*/ struct IMSMQMessage2 * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_PeekCurrent (
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * ReceiveTimeout,
        /*[in]*/ VARIANT * WantConnectorType,
        /*[out,retval]*/ struct IMSMQMessage2 * * ppmsg ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ IDispatch * * ppcolProperties ) = 0;
};

struct __declspec(uuid("d9933be0-a567-11d2-b0f3-00e02c074f6b"))
IMSMQMessage2 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBody,put=PutBody))
    _variant_t Body;
    __declspec(property(get=GetDelivery,put=PutDelivery))
    long Delivery;
    __declspec(property(get=GetPriority,put=PutPriority))
    long Priority;
    __declspec(property(get=GetJournal,put=PutJournal))
    long Journal;
    __declspec(property(get=GetResponseQueueInfo_v1,put=PutRefResponseQueueInfo_v1))
    IMSMQQueueInfoPtr ResponseQueueInfo_v1;
    __declspec(property(get=GetAppSpecific,put=PutAppSpecific))
    long AppSpecific;
    __declspec(property(get=GetSourceMachineGuid))
    _bstr_t SourceMachineGuid;
    __declspec(property(get=GetClass))
    long Class;
    __declspec(property(get=GetAdminQueueInfo_v1,put=PutRefAdminQueueInfo_v1))
    IMSMQQueueInfoPtr AdminQueueInfo_v1;
    __declspec(property(get=GetId))
    _variant_t Id;
    __declspec(property(get=GetCorrelationId,put=PutCorrelationId))
    _variant_t CorrelationId;
    __declspec(property(get=GetAck,put=PutAck))
    long Ack;
    __declspec(property(get=GetLabel,put=PutLabel))
    _bstr_t Label;
    __declspec(property(get=GetBodyLength))
    long BodyLength;
    __declspec(property(get=GetMaxTimeToReachQueue,put=PutMaxTimeToReachQueue))
    long MaxTimeToReachQueue;
    __declspec(property(get=GetMaxTimeToReceive,put=PutMaxTimeToReceive))
    long MaxTimeToReceive;
    __declspec(property(get=GetEncryptAlgorithm,put=PutEncryptAlgorithm))
    long EncryptAlgorithm;
    __declspec(property(get=GetHashAlgorithm,put=PutHashAlgorithm))
    long HashAlgorithm;
    __declspec(property(get=GetSentTime))
    _variant_t SentTime;
    __declspec(property(get=GetArrivedTime))
    _variant_t ArrivedTime;
    __declspec(property(get=GetDestinationQueueInfo))
    IMSMQQueueInfo2Ptr DestinationQueueInfo;
    __declspec(property(get=GetSenderCertificate,put=PutSenderCertificate))
    _variant_t SenderCertificate;
    __declspec(property(get=GetSenderId,put=PutSenderId))
    _variant_t SenderId;
    __declspec(property(get=GetSenderIdType,put=PutSenderIdType))
    long SenderIdType;
    __declspec(property(get=GetTrace,put=PutTrace))
    long Trace;
    __declspec(property(get=GetPrivLevel,put=PutPrivLevel))
    long PrivLevel;
    __declspec(property(get=GetAuthLevel,put=PutAuthLevel))
    long AuthLevel;
    __declspec(property(get=GetIsAuthenticated))
    short IsAuthenticated;
    __declspec(property(get=GetSenderVersion))
    long SenderVersion;
    __declspec(property(get=GetExtension,put=PutExtension))
    _variant_t Extension;
    __declspec(property(get=GetConnectorTypeGuid,put=PutConnectorTypeGuid))
    _bstr_t ConnectorTypeGuid;
    __declspec(property(get=GetTransactionStatusQueueInfo))
    IMSMQQueueInfo2Ptr TransactionStatusQueueInfo;
    __declspec(property(get=GetDestinationSymmetricKey,put=PutDestinationSymmetricKey))
    _variant_t DestinationSymmetricKey;
    __declspec(property(get=GetSignature,put=PutSignature))
    _variant_t Signature;
    __declspec(property(get=GetAuthenticationProviderType,put=PutAuthenticationProviderType))
    long AuthenticationProviderType;
    __declspec(property(get=GetAuthenticationProviderName,put=PutAuthenticationProviderName))
    _bstr_t AuthenticationProviderName;
    __declspec(property(get=GetMsgClass,put=PutMsgClass))
    long MsgClass;
    __declspec(property(get=GetProperties))
    IDispatchPtr Properties;
    __declspec(property(get=GetTransactionId))
    _variant_t TransactionId;
    __declspec(property(get=GetIsFirstInTransaction))
    short IsFirstInTransaction;
    __declspec(property(get=GetIsLastInTransaction))
    short IsLastInTransaction;
    __declspec(property(get=GetResponseQueueInfo,put=PutRefResponseQueueInfo))
    IMSMQQueueInfo2Ptr ResponseQueueInfo;
    __declspec(property(get=GetAdminQueueInfo,put=PutRefAdminQueueInfo))
    IMSMQQueueInfo2Ptr AdminQueueInfo;
    __declspec(property(get=GetReceivedAuthenticationLevel))
    short ReceivedAuthenticationLevel;

    //
    // Wrapper methods for error-handling
    //

    long GetClass ( );
    long GetPrivLevel ( );
    void PutPrivLevel (
        long plPrivLevel );
    long GetAuthLevel ( );
    void PutAuthLevel (
        long plAuthLevel );
    short GetIsAuthenticated ( );
    long GetDelivery ( );
    void PutDelivery (
        long plDelivery );
    long GetTrace ( );
    void PutTrace (
        long plTrace );
    long GetPriority ( );
    void PutPriority (
        long plPriority );
    long GetJournal ( );
    void PutJournal (
        long plJournal );
    IMSMQQueueInfoPtr GetResponseQueueInfo_v1 ( );
    void PutRefResponseQueueInfo_v1 (
        struct IMSMQQueueInfo * ppqinfoResponse );
    long GetAppSpecific ( );
    void PutAppSpecific (
        long plAppSpecific );
    _bstr_t GetSourceMachineGuid ( );
    long GetBodyLength ( );
    _variant_t GetBody ( );
    void PutBody (
        const _variant_t & pvarBody );
    IMSMQQueueInfoPtr GetAdminQueueInfo_v1 ( );
    void PutRefAdminQueueInfo_v1 (
        struct IMSMQQueueInfo * ppqinfoAdmin );
    _variant_t GetId ( );
    _variant_t GetCorrelationId ( );
    void PutCorrelationId (
        const _variant_t & pvarMsgId );
    long GetAck ( );
    void PutAck (
        long plAck );
    _bstr_t GetLabel ( );
    void PutLabel (
        _bstr_t pbstrLabel );
    long GetMaxTimeToReachQueue ( );
    void PutMaxTimeToReachQueue (
        long plMaxTimeToReachQueue );
    long GetMaxTimeToReceive ( );
    void PutMaxTimeToReceive (
        long plMaxTimeToReceive );
    long GetHashAlgorithm ( );
    void PutHashAlgorithm (
        long plHashAlg );
    long GetEncryptAlgorithm ( );
    void PutEncryptAlgorithm (
        long plEncryptAlg );
    _variant_t GetSentTime ( );
    _variant_t GetArrivedTime ( );
    IMSMQQueueInfo2Ptr GetDestinationQueueInfo ( );
    _variant_t GetSenderCertificate ( );
    void PutSenderCertificate (
        const _variant_t & pvarSenderCert );
    _variant_t GetSenderId ( );
    long GetSenderIdType ( );
    void PutSenderIdType (
        long plSenderIdType );
    HRESULT Send (
        struct IMSMQQueue2 * DestinationQueue,
        VARIANT * Transaction = &vtMissing );
    HRESULT AttachCurrentSecurityContext ( );
    long GetSenderVersion ( );
    _variant_t GetExtension ( );
    void PutExtension (
        const _variant_t & pvarExtension );
    _bstr_t GetConnectorTypeGuid ( );
    void PutConnectorTypeGuid (
        _bstr_t pbstrGuidConnectorType );
    IMSMQQueueInfo2Ptr GetTransactionStatusQueueInfo ( );
    _variant_t GetDestinationSymmetricKey ( );
    void PutDestinationSymmetricKey (
        const _variant_t & pvarDestSymmKey );
    _variant_t GetSignature ( );
    void PutSignature (
        const _variant_t & pvarSignature );
    long GetAuthenticationProviderType ( );
    void PutAuthenticationProviderType (
        long plAuthProvType );
    _bstr_t GetAuthenticationProviderName ( );
    void PutAuthenticationProviderName (
        _bstr_t pbstrAuthProvName );
    void PutSenderId (
        const _variant_t & pvarSenderId );
    long GetMsgClass ( );
    void PutMsgClass (
        long plMsgClass );
    IDispatchPtr GetProperties ( );
    _variant_t GetTransactionId ( );
    short GetIsFirstInTransaction ( );
    short GetIsLastInTransaction ( );
    IMSMQQueueInfo2Ptr GetResponseQueueInfo ( );
    void PutRefResponseQueueInfo (
        struct IMSMQQueueInfo2 * ppqinfoResponse );
    IMSMQQueueInfo2Ptr GetAdminQueueInfo ( );
    void PutRefAdminQueueInfo (
        struct IMSMQQueueInfo2 * ppqinfoAdmin );
    short GetReceivedAuthenticationLevel ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Class (
        /*[out,retval]*/ long * plClass ) = 0;
      virtual HRESULT __stdcall get_PrivLevel (
        /*[out,retval]*/ long * plPrivLevel ) = 0;
      virtual HRESULT __stdcall put_PrivLevel (
        /*[in]*/ long plPrivLevel ) = 0;
      virtual HRESULT __stdcall get_AuthLevel (
        /*[out,retval]*/ long * plAuthLevel ) = 0;
      virtual HRESULT __stdcall put_AuthLevel (
        /*[in]*/ long plAuthLevel ) = 0;
      virtual HRESULT __stdcall get_IsAuthenticated (
        /*[out,retval]*/ short * pisAuthenticated ) = 0;
      virtual HRESULT __stdcall get_Delivery (
        /*[out,retval]*/ long * plDelivery ) = 0;
      virtual HRESULT __stdcall put_Delivery (
        /*[in]*/ long plDelivery ) = 0;
      virtual HRESULT __stdcall get_Trace (
        /*[out,retval]*/ long * plTrace ) = 0;
      virtual HRESULT __stdcall put_Trace (
        /*[in]*/ long plTrace ) = 0;
      virtual HRESULT __stdcall get_Priority (
        /*[out,retval]*/ long * plPriority ) = 0;
      virtual HRESULT __stdcall put_Priority (
        /*[in]*/ long plPriority ) = 0;
      virtual HRESULT __stdcall get_Journal (
        /*[out,retval]*/ long * plJournal ) = 0;
      virtual HRESULT __stdcall put_Journal (
        /*[in]*/ long plJournal ) = 0;
      virtual HRESULT __stdcall get_ResponseQueueInfo_v1 (
        /*[out,retval]*/ struct IMSMQQueueInfo * * ppqinfoResponse ) = 0;
      virtual HRESULT __stdcall putref_ResponseQueueInfo_v1 (
        /*[in]*/ struct IMSMQQueueInfo * ppqinfoResponse ) = 0;
      virtual HRESULT __stdcall get_AppSpecific (
        /*[out,retval]*/ long * plAppSpecific ) = 0;
      virtual HRESULT __stdcall put_AppSpecific (
        /*[in]*/ long plAppSpecific ) = 0;
      virtual HRESULT __stdcall get_SourceMachineGuid (
        /*[out,retval]*/ BSTR * pbstrGuidSrcMachine ) = 0;
      virtual HRESULT __stdcall get_BodyLength (
        /*[out,retval]*/ long * pcbBody ) = 0;
      virtual HRESULT __stdcall get_Body (
        /*[out,retval]*/ VARIANT * pvarBody ) = 0;
      virtual HRESULT __stdcall put_Body (
        /*[in]*/ VARIANT pvarBody ) = 0;
      virtual HRESULT __stdcall get_AdminQueueInfo_v1 (
        /*[out,retval]*/ struct IMSMQQueueInfo * * ppqinfoAdmin ) = 0;
      virtual HRESULT __stdcall putref_AdminQueueInfo_v1 (
        /*[in]*/ struct IMSMQQueueInfo * ppqinfoAdmin ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ VARIANT * pvarMsgId ) = 0;
      virtual HRESULT __stdcall get_CorrelationId (
        /*[out,retval]*/ VARIANT * pvarMsgId ) = 0;
      virtual HRESULT __stdcall put_CorrelationId (
        /*[in]*/ VARIANT pvarMsgId ) = 0;
      virtual HRESULT __stdcall get_Ack (
        /*[out,retval]*/ long * plAck ) = 0;
      virtual HRESULT __stdcall put_Ack (
        /*[in]*/ long plAck ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ BSTR * pbstrLabel ) = 0;
      virtual HRESULT __stdcall put_Label (
        /*[in]*/ BSTR pbstrLabel ) = 0;
      virtual HRESULT __stdcall get_MaxTimeToReachQueue (
        /*[out,retval]*/ long * plMaxTimeToReachQueue ) = 0;
      virtual HRESULT __stdcall put_MaxTimeToReachQueue (
        /*[in]*/ long plMaxTimeToReachQueue ) = 0;
      virtual HRESULT __stdcall get_MaxTimeToReceive (
        /*[out,retval]*/ long * plMaxTimeToReceive ) = 0;
      virtual HRESULT __stdcall put_MaxTimeToReceive (
        /*[in]*/ long plMaxTimeToReceive ) = 0;
      virtual HRESULT __stdcall get_HashAlgorithm (
        /*[out,retval]*/ long * plHashAlg ) = 0;
      virtual HRESULT __stdcall put_HashAlgorithm (
        /*[in]*/ long plHashAlg ) = 0;
      virtual HRESULT __stdcall get_EncryptAlgorithm (
        /*[out,retval]*/ long * plEncryptAlg ) = 0;
      virtual HRESULT __stdcall put_EncryptAlgorithm (
        /*[in]*/ long plEncryptAlg ) = 0;
      virtual HRESULT __stdcall get_SentTime (
        /*[out,retval]*/ VARIANT * pvarSentTime ) = 0;
      virtual HRESULT __stdcall get_ArrivedTime (
        /*[out,retval]*/ VARIANT * plArrivedTime ) = 0;
      virtual HRESULT __stdcall get_DestinationQueueInfo (
        /*[out,retval]*/ struct IMSMQQueueInfo2 * * ppqinfoDest ) = 0;
      virtual HRESULT __stdcall get_SenderCertificate (
        /*[out,retval]*/ VARIANT * pvarSenderCert ) = 0;
      virtual HRESULT __stdcall put_SenderCertificate (
        /*[in]*/ VARIANT pvarSenderCert ) = 0;
      virtual HRESULT __stdcall get_SenderId (
        /*[out,retval]*/ VARIANT * pvarSenderId ) = 0;
      virtual HRESULT __stdcall get_SenderIdType (
        /*[out,retval]*/ long * plSenderIdType ) = 0;
      virtual HRESULT __stdcall put_SenderIdType (
        /*[in]*/ long plSenderIdType ) = 0;
      virtual HRESULT __stdcall raw_Send (
        /*[in]*/ struct IMSMQQueue2 * DestinationQueue,
        /*[in]*/ VARIANT * Transaction = &vtMissing ) = 0;
      virtual HRESULT __stdcall raw_AttachCurrentSecurityContext ( ) = 0;
      virtual HRESULT __stdcall get_SenderVersion (
        /*[out,retval]*/ long * plSenderVersion ) = 0;
      virtual HRESULT __stdcall get_Extension (
        /*[out,retval]*/ VARIANT * pvarExtension ) = 0;
      virtual HRESULT __stdcall put_Extension (
        /*[in]*/ VARIANT pvarExtension ) = 0;
      virtual HRESULT __stdcall get_ConnectorTypeGuid (
        /*[out,retval]*/ BSTR * pbstrGuidConnectorType ) = 0;
      virtual HRESULT __stdcall put_ConnectorTypeGuid (
        /*[in]*/ BSTR pbstrGuidConnectorType ) = 0;
      virtual HRESULT __stdcall get_TransactionStatusQueueInfo (
        /*[out,retval]*/ struct IMSMQQueueInfo2 * * ppqinfoXactStatus ) = 0;
      virtual HRESULT __stdcall get_DestinationSymmetricKey (
        /*[out,retval]*/ VARIANT * pvarDestSymmKey ) = 0;
      virtual HRESULT __stdcall put_DestinationSymmetricKey (
        /*[in]*/ VARIANT pvarDestSymmKey ) = 0;
      virtual HRESULT __stdcall get_Signature (
        /*[out,retval]*/ VARIANT * pvarSignature ) = 0;
      virtual HRESULT __stdcall put_Signature (
        /*[in]*/ VARIANT pvarSignature ) = 0;
      virtual HRESULT __stdcall get_AuthenticationProviderType (
        /*[out,retval]*/ long * plAuthProvType ) = 0;
      virtual HRESULT __stdcall put_AuthenticationProviderType (
        /*[in]*/ long plAuthProvType ) = 0;
      virtual HRESULT __stdcall get_AuthenticationProviderName (
        /*[out,retval]*/ BSTR * pbstrAuthProvName ) = 0;
      virtual HRESULT __stdcall put_AuthenticationProviderName (
        /*[in]*/ BSTR pbstrAuthProvName ) = 0;
      virtual HRESULT __stdcall put_SenderId (
        /*[in]*/ VARIANT pvarSenderId ) = 0;
      virtual HRESULT __stdcall get_MsgClass (
        /*[out,retval]*/ long * plMsgClass ) = 0;
      virtual HRESULT __stdcall put_MsgClass (
        /*[in]*/ long plMsgClass ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ IDispatch * * ppcolProperties ) = 0;
      virtual HRESULT __stdcall get_TransactionId (
        /*[out,retval]*/ VARIANT * pvarXactId ) = 0;
      virtual HRESULT __stdcall get_IsFirstInTransaction (
        /*[out,retval]*/ short * pisFirstInXact ) = 0;
      virtual HRESULT __stdcall get_IsLastInTransaction (
        /*[out,retval]*/ short * pisLastInXact ) = 0;
      virtual HRESULT __stdcall get_ResponseQueueInfo (
        /*[out,retval]*/ struct IMSMQQueueInfo2 * * ppqinfoResponse ) = 0;
      virtual HRESULT __stdcall putref_ResponseQueueInfo (
        /*[in]*/ struct IMSMQQueueInfo2 * ppqinfoResponse ) = 0;
      virtual HRESULT __stdcall get_AdminQueueInfo (
        /*[out,retval]*/ struct IMSMQQueueInfo2 * * ppqinfoAdmin ) = 0;
      virtual HRESULT __stdcall putref_AdminQueueInfo (
        /*[in]*/ struct IMSMQQueueInfo2 * ppqinfoAdmin ) = 0;
      virtual HRESULT __stdcall get_ReceivedAuthenticationLevel (
        /*[out,retval]*/ short * psReceivedAuthenticationLevel ) = 0;
};

struct __declspec(uuid("eba96b1d-2168-11d3-898c-00e02c074f6b"))
IMSMQQueueInfo3 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetQueueGuid))
    _bstr_t QueueGuid;
    __declspec(property(get=GetServiceTypeGuid,put=PutServiceTypeGuid))
    _bstr_t ServiceTypeGuid;
    __declspec(property(get=GetLabel,put=PutLabel))
    _bstr_t Label;
    __declspec(property(get=GetPathName,put=PutPathName))
    _bstr_t PathName;
    __declspec(property(get=GetFormatName,put=PutFormatName))
    _bstr_t FormatName;
    __declspec(property(get=GetIsTransactional))
    short IsTransactional;
    __declspec(property(get=GetPrivLevel,put=PutPrivLevel))
    long PrivLevel;
    __declspec(property(get=GetJournal,put=PutJournal))
    long Journal;
    __declspec(property(get=GetBasePriority,put=PutBasePriority))
    long BasePriority;
    __declspec(property(get=GetCreateTime))
    _variant_t CreateTime;
    __declspec(property(get=GetModifyTime))
    _variant_t ModifyTime;
    __declspec(property(get=GetAuthenticate,put=PutAuthenticate))
    long Authenticate;
    __declspec(property(get=GetQuota,put=PutQuota))
    long Quota;
    __declspec(property(get=GetJournalQuota,put=PutJournalQuota))
    long JournalQuota;
    __declspec(property(get=GetIsWorldReadable))
    short IsWorldReadable;
    __declspec(property(get=GetPathNameDNS))
    _bstr_t PathNameDNS;
    __declspec(property(get=GetProperties))
    IDispatchPtr Properties;
    __declspec(property(get=GetSecurity,put=PutSecurity))
    _variant_t Security;
    __declspec(property(get=GetADsPath))
    _bstr_t ADsPath;
    __declspec(property(get=GetIsTransactional2))
    VARIANT_BOOL IsTransactional2;
    __declspec(property(get=GetIsWorldReadable2))
    VARIANT_BOOL IsWorldReadable2;
    __declspec(property(get=GetMulticastAddress,put=PutMulticastAddress))
    _bstr_t MulticastAddress;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetQueueGuid ( );
    _bstr_t GetServiceTypeGuid ( );
    void PutServiceTypeGuid (
        _bstr_t pbstrGuidServiceType );
    _bstr_t GetLabel ( );
    void PutLabel (
        _bstr_t pbstrLabel );
    _bstr_t GetPathName ( );
    void PutPathName (
        _bstr_t pbstrPathName );
    _bstr_t GetFormatName ( );
    void PutFormatName (
        _bstr_t pbstrFormatName );
    short GetIsTransactional ( );
    long GetPrivLevel ( );
    void PutPrivLevel (
        long plPrivLevel );
    long GetJournal ( );
    void PutJournal (
        long plJournal );
    long GetQuota ( );
    void PutQuota (
        long plQuota );
    long GetBasePriority ( );
    void PutBasePriority (
        long plBasePriority );
    _variant_t GetCreateTime ( );
    _variant_t GetModifyTime ( );
    long GetAuthenticate ( );
    void PutAuthenticate (
        long plAuthenticate );
    long GetJournalQuota ( );
    void PutJournalQuota (
        long plJournalQuota );
    short GetIsWorldReadable ( );
    HRESULT Create (
        VARIANT * IsTransactional = &vtMissing,
        VARIANT * IsWorldReadable = &vtMissing );
    HRESULT Delete ( );
    IMSMQQueue3Ptr Open (
        long Access,
        long ShareMode );
    HRESULT Refresh ( );
    HRESULT Update ( );
    _bstr_t GetPathNameDNS ( );
    IDispatchPtr GetProperties ( );
    _variant_t GetSecurity ( );
    void PutSecurity (
        const _variant_t & pvarSecurity );
    VARIANT_BOOL GetIsTransactional2 ( );
    VARIANT_BOOL GetIsWorldReadable2 ( );
    _bstr_t GetMulticastAddress ( );
    void PutMulticastAddress (
        _bstr_t pbstrMulticastAddress );
    _bstr_t GetADsPath ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_QueueGuid (
        /*[out,retval]*/ BSTR * pbstrGuidQueue ) = 0;
      virtual HRESULT __stdcall get_ServiceTypeGuid (
        /*[out,retval]*/ BSTR * pbstrGuidServiceType ) = 0;
      virtual HRESULT __stdcall put_ServiceTypeGuid (
        /*[in]*/ BSTR pbstrGuidServiceType ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ BSTR * pbstrLabel ) = 0;
      virtual HRESULT __stdcall put_Label (
        /*[in]*/ BSTR pbstrLabel ) = 0;
      virtual HRESULT __stdcall get_PathName (
        /*[out,retval]*/ BSTR * pbstrPathName ) = 0;
      virtual HRESULT __stdcall put_PathName (
        /*[in]*/ BSTR pbstrPathName ) = 0;
      virtual HRESULT __stdcall get_FormatName (
        /*[out,retval]*/ BSTR * pbstrFormatName ) = 0;
      virtual HRESULT __stdcall put_FormatName (
        /*[in]*/ BSTR pbstrFormatName ) = 0;
      virtual HRESULT __stdcall get_IsTransactional (
        /*[out,retval]*/ short * pisTransactional ) = 0;
      virtual HRESULT __stdcall get_PrivLevel (
        /*[out,retval]*/ long * plPrivLevel ) = 0;
      virtual HRESULT __stdcall put_PrivLevel (
        /*[in]*/ long plPrivLevel ) = 0;
      virtual HRESULT __stdcall get_Journal (
        /*[out,retval]*/ long * plJournal ) = 0;
      virtual HRESULT __stdcall put_Journal (
        /*[in]*/ long plJournal ) = 0;
      virtual HRESULT __stdcall get_Quota (
        /*[out,retval]*/ long * plQuota ) = 0;
      virtual HRESULT __stdcall put_Quota (
        /*[in]*/ long plQuota ) = 0;
      virtual HRESULT __stdcall get_BasePriority (
        /*[out,retval]*/ long * plBasePriority ) = 0;
      virtual HRESULT __stdcall put_BasePriority (
        /*[in]*/ long plBasePriority ) = 0;
      virtual HRESULT __stdcall get_CreateTime (
        /*[out,retval]*/ VARIANT * pvarCreateTime ) = 0;
      virtual HRESULT __stdcall get_ModifyTime (
        /*[out,retval]*/ VARIANT * pvarModifyTime ) = 0;
      virtual HRESULT __stdcall get_Authenticate (
        /*[out,retval]*/ long * plAuthenticate ) = 0;
      virtual HRESULT __stdcall put_Authenticate (
        /*[in]*/ long plAuthenticate ) = 0;
      virtual HRESULT __stdcall get_JournalQuota (
        /*[out,retval]*/ long * plJournalQuota ) = 0;
      virtual HRESULT __stdcall put_JournalQuota (
        /*[in]*/ long plJournalQuota ) = 0;
      virtual HRESULT __stdcall get_IsWorldReadable (
        /*[out,retval]*/ short * pisWorldReadable ) = 0;
      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ VARIANT * IsTransactional = &vtMissing,
        /*[in]*/ VARIANT * IsWorldReadable = &vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Open (
        /*[in]*/ long Access,
        /*[in]*/ long ShareMode,
        /*[out,retval]*/ struct IMSMQQueue3 * * ppq ) = 0;
      virtual HRESULT __stdcall raw_Refresh ( ) = 0;
      virtual HRESULT __stdcall raw_Update ( ) = 0;
      virtual HRESULT __stdcall get_PathNameDNS (
        /*[out,retval]*/ BSTR * pbstrPathNameDNS ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ IDispatch * * ppcolProperties ) = 0;
      virtual HRESULT __stdcall get_Security (
        /*[out,retval]*/ VARIANT * pvarSecurity ) = 0;
      virtual HRESULT __stdcall put_Security (
        /*[in]*/ VARIANT pvarSecurity ) = 0;
      virtual HRESULT __stdcall get_IsTransactional2 (
        /*[out,retval]*/ VARIANT_BOOL * pisTransactional ) = 0;
      virtual HRESULT __stdcall get_IsWorldReadable2 (
        /*[out,retval]*/ VARIANT_BOOL * pisWorldReadable ) = 0;
      virtual HRESULT __stdcall get_MulticastAddress (
        /*[out,retval]*/ BSTR * pbstrMulticastAddress ) = 0;
      virtual HRESULT __stdcall put_MulticastAddress (
        /*[in]*/ BSTR pbstrMulticastAddress ) = 0;
      virtual HRESULT __stdcall get_ADsPath (
        /*[out,retval]*/ BSTR * pbstrADsPath ) = 0;
};

struct __declspec(uuid("eba96b1a-2168-11d3-898c-00e02c074f6b"))
IMSMQMessage3 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBody,put=PutBody))
    _variant_t Body;
    __declspec(property(get=GetDelivery,put=PutDelivery))
    long Delivery;
    __declspec(property(get=GetPriority,put=PutPriority))
    long Priority;
    __declspec(property(get=GetJournal,put=PutJournal))
    long Journal;
    __declspec(property(get=GetResponseQueueInfo_v1,put=PutRefResponseQueueInfo_v1))
    IMSMQQueueInfoPtr ResponseQueueInfo_v1;
    __declspec(property(get=GetAppSpecific,put=PutAppSpecific))
    long AppSpecific;
    __declspec(property(get=GetSourceMachineGuid))
    _bstr_t SourceMachineGuid;
    __declspec(property(get=GetClass))
    long Class;
    __declspec(property(get=GetAdminQueueInfo_v1,put=PutRefAdminQueueInfo_v1))
    IMSMQQueueInfoPtr AdminQueueInfo_v1;
    __declspec(property(get=GetId))
    _variant_t Id;
    __declspec(property(get=GetCorrelationId,put=PutCorrelationId))
    _variant_t CorrelationId;
    __declspec(property(get=GetAck,put=PutAck))
    long Ack;
    __declspec(property(get=GetLabel,put=PutLabel))
    _bstr_t Label;
    __declspec(property(get=GetBodyLength))
    long BodyLength;
    __declspec(property(get=GetMaxTimeToReachQueue,put=PutMaxTimeToReachQueue))
    long MaxTimeToReachQueue;
    __declspec(property(get=GetMaxTimeToReceive,put=PutMaxTimeToReceive))
    long MaxTimeToReceive;
    __declspec(property(get=GetEncryptAlgorithm,put=PutEncryptAlgorithm))
    long EncryptAlgorithm;
    __declspec(property(get=GetHashAlgorithm,put=PutHashAlgorithm))
    long HashAlgorithm;
    __declspec(property(get=GetSentTime))
    _variant_t SentTime;
    __declspec(property(get=GetArrivedTime))
    _variant_t ArrivedTime;
    __declspec(property(get=GetDestinationQueueInfo))
    IMSMQQueueInfo3Ptr DestinationQueueInfo;
    __declspec(property(get=GetSenderCertificate,put=PutSenderCertificate))
    _variant_t SenderCertificate;
    __declspec(property(get=GetSenderId,put=PutSenderId))
    _variant_t SenderId;
    __declspec(property(get=GetSenderIdType,put=PutSenderIdType))
    long SenderIdType;
    __declspec(property(get=GetTrace,put=PutTrace))
    long Trace;
    __declspec(property(get=GetPrivLevel,put=PutPrivLevel))
    long PrivLevel;
    __declspec(property(get=GetAuthLevel,put=PutAuthLevel))
    long AuthLevel;
    __declspec(property(get=GetIsAuthenticated))
    short IsAuthenticated;
    __declspec(property(get=GetSenderVersion))
    long SenderVersion;
    __declspec(property(get=GetExtension,put=PutExtension))
    _variant_t Extension;
    __declspec(property(get=GetConnectorTypeGuid,put=PutConnectorTypeGuid))
    _bstr_t ConnectorTypeGuid;
    __declspec(property(get=GetTransactionStatusQueueInfo))
    IMSMQQueueInfo3Ptr TransactionStatusQueueInfo;
    __declspec(property(get=GetDestinationSymmetricKey,put=PutDestinationSymmetricKey))
    _variant_t DestinationSymmetricKey;
    __declspec(property(get=GetSignature,put=PutSignature))
    _variant_t Signature;
    __declspec(property(get=GetAuthenticationProviderType,put=PutAuthenticationProviderType))
    long AuthenticationProviderType;
    __declspec(property(get=GetAuthenticationProviderName,put=PutAuthenticationProviderName))
    _bstr_t AuthenticationProviderName;
    __declspec(property(get=GetMsgClass,put=PutMsgClass))
    long MsgClass;
    __declspec(property(get=GetProperties))
    IDispatchPtr Properties;
    __declspec(property(get=GetTransactionId))
    _variant_t TransactionId;
    __declspec(property(get=GetIsFirstInTransaction))
    short IsFirstInTransaction;
    __declspec(property(get=GetIsLastInTransaction))
    short IsLastInTransaction;
    __declspec(property(get=GetResponseQueueInfo_v2,put=PutRefResponseQueueInfo_v2))
    IMSMQQueueInfo2Ptr ResponseQueueInfo_v2;
    __declspec(property(get=GetAdminQueueInfo_v2,put=PutRefAdminQueueInfo_v2))
    IMSMQQueueInfo2Ptr AdminQueueInfo_v2;
    __declspec(property(get=GetReceivedAuthenticationLevel))
    short ReceivedAuthenticationLevel;
    __declspec(property(get=GetResponseQueueInfo,put=PutRefResponseQueueInfo))
    IMSMQQueueInfo3Ptr ResponseQueueInfo;
    __declspec(property(get=GetAdminQueueInfo,put=PutRefAdminQueueInfo))
    IMSMQQueueInfo3Ptr AdminQueueInfo;
    __declspec(property(get=GetResponseDestination,put=PutRefResponseDestination))
    IDispatchPtr ResponseDestination;
    __declspec(property(get=GetDestination))
    IDispatchPtr Destination;
    __declspec(property(get=GetLookupId))
    _variant_t LookupId;
    __declspec(property(get=GetIsAuthenticated2))
    VARIANT_BOOL IsAuthenticated2;
    __declspec(property(get=GetIsFirstInTransaction2))
    VARIANT_BOOL IsFirstInTransaction2;
    __declspec(property(get=GetIsLastInTransaction2))
    VARIANT_BOOL IsLastInTransaction2;
    __declspec(property(get=GetSoapEnvelope))
    _bstr_t SoapEnvelope;
    __declspec(property(get=GetCompoundMessage))
    _variant_t CompoundMessage;
    __declspec(property(put=PutSoapHeader))
    _bstr_t SoapHeader;
    __declspec(property(put=PutSoapBody))
    _bstr_t SoapBody;

    //
    // Wrapper methods for error-handling
    //

    long GetClass ( );
    long GetPrivLevel ( );
    void PutPrivLevel (
        long plPrivLevel );
    long GetAuthLevel ( );
    void PutAuthLevel (
        long plAuthLevel );
    short GetIsAuthenticated ( );
    long GetDelivery ( );
    void PutDelivery (
        long plDelivery );
    long GetTrace ( );
    void PutTrace (
        long plTrace );
    long GetPriority ( );
    void PutPriority (
        long plPriority );
    long GetJournal ( );
    void PutJournal (
        long plJournal );
    IMSMQQueueInfoPtr GetResponseQueueInfo_v1 ( );
    void PutRefResponseQueueInfo_v1 (
        struct IMSMQQueueInfo * ppqinfoResponse );
    long GetAppSpecific ( );
    void PutAppSpecific (
        long plAppSpecific );
    _bstr_t GetSourceMachineGuid ( );
    long GetBodyLength ( );
    _variant_t GetBody ( );
    void PutBody (
        const _variant_t & pvarBody );
    IMSMQQueueInfoPtr GetAdminQueueInfo_v1 ( );
    void PutRefAdminQueueInfo_v1 (
        struct IMSMQQueueInfo * ppqinfoAdmin );
    _variant_t GetId ( );
    _variant_t GetCorrelationId ( );
    void PutCorrelationId (
        const _variant_t & pvarMsgId );
    long GetAck ( );
    void PutAck (
        long plAck );
    _bstr_t GetLabel ( );
    void PutLabel (
        _bstr_t pbstrLabel );
    long GetMaxTimeToReachQueue ( );
    void PutMaxTimeToReachQueue (
        long plMaxTimeToReachQueue );
    long GetMaxTimeToReceive ( );
    void PutMaxTimeToReceive (
        long plMaxTimeToReceive );
    long GetHashAlgorithm ( );
    void PutHashAlgorithm (
        long plHashAlg );
    long GetEncryptAlgorithm ( );
    void PutEncryptAlgorithm (
        long plEncryptAlg );
    _variant_t GetSentTime ( );
    _variant_t GetArrivedTime ( );
    IMSMQQueueInfo3Ptr GetDestinationQueueInfo ( );
    _variant_t GetSenderCertificate ( );
    void PutSenderCertificate (
        const _variant_t & pvarSenderCert );
    _variant_t GetSenderId ( );
    long GetSenderIdType ( );
    void PutSenderIdType (
        long plSenderIdType );
    HRESULT Send (
        IDispatch * DestinationQueue,
        VARIANT * Transaction = &vtMissing );
    HRESULT AttachCurrentSecurityContext ( );
    long GetSenderVersion ( );
    _variant_t GetExtension ( );
    void PutExtension (
        const _variant_t & pvarExtension );
    _bstr_t GetConnectorTypeGuid ( );
    void PutConnectorTypeGuid (
        _bstr_t pbstrGuidConnectorType );
    IMSMQQueueInfo3Ptr GetTransactionStatusQueueInfo ( );
    _variant_t GetDestinationSymmetricKey ( );
    void PutDestinationSymmetricKey (
        const _variant_t & pvarDestSymmKey );
    _variant_t GetSignature ( );
    void PutSignature (
        const _variant_t & pvarSignature );
    long GetAuthenticationProviderType ( );
    void PutAuthenticationProviderType (
        long plAuthProvType );
    _bstr_t GetAuthenticationProviderName ( );
    void PutAuthenticationProviderName (
        _bstr_t pbstrAuthProvName );
    void PutSenderId (
        const _variant_t & pvarSenderId );
    long GetMsgClass ( );
    void PutMsgClass (
        long plMsgClass );
    IDispatchPtr GetProperties ( );
    _variant_t GetTransactionId ( );
    short GetIsFirstInTransaction ( );
    short GetIsLastInTransaction ( );
    IMSMQQueueInfo2Ptr GetResponseQueueInfo_v2 ( );
    void PutRefResponseQueueInfo_v2 (
        struct IMSMQQueueInfo2 * ppqinfoResponse );
    IMSMQQueueInfo2Ptr GetAdminQueueInfo_v2 ( );
    void PutRefAdminQueueInfo_v2 (
        struct IMSMQQueueInfo2 * ppqinfoAdmin );
    short GetReceivedAuthenticationLevel ( );
    IMSMQQueueInfo3Ptr GetResponseQueueInfo ( );
    void PutRefResponseQueueInfo (
        struct IMSMQQueueInfo3 * ppqinfoResponse );
    IMSMQQueueInfo3Ptr GetAdminQueueInfo ( );
    void PutRefAdminQueueInfo (
        struct IMSMQQueueInfo3 * ppqinfoAdmin );
    IDispatchPtr GetResponseDestination ( );
    void PutRefResponseDestination (
        IDispatch * ppdestResponse );
    IDispatchPtr GetDestination ( );
    _variant_t GetLookupId ( );
    VARIANT_BOOL GetIsAuthenticated2 ( );
    VARIANT_BOOL GetIsFirstInTransaction2 ( );
    VARIANT_BOOL GetIsLastInTransaction2 ( );
    HRESULT AttachCurrentSecurityContext2 ( );
    _bstr_t GetSoapEnvelope ( );
    _variant_t GetCompoundMessage ( );
    void PutSoapHeader (
        _bstr_t _arg1 );
    void PutSoapBody (
        _bstr_t _arg1 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Class (
        /*[out,retval]*/ long * plClass ) = 0;
      virtual HRESULT __stdcall get_PrivLevel (
        /*[out,retval]*/ long * plPrivLevel ) = 0;
      virtual HRESULT __stdcall put_PrivLevel (
        /*[in]*/ long plPrivLevel ) = 0;
      virtual HRESULT __stdcall get_AuthLevel (
        /*[out,retval]*/ long * plAuthLevel ) = 0;
      virtual HRESULT __stdcall put_AuthLevel (
        /*[in]*/ long plAuthLevel ) = 0;
      virtual HRESULT __stdcall get_IsAuthenticated (
        /*[out,retval]*/ short * pisAuthenticated ) = 0;
      virtual HRESULT __stdcall get_Delivery (
        /*[out,retval]*/ long * plDelivery ) = 0;
      virtual HRESULT __stdcall put_Delivery (
        /*[in]*/ long plDelivery ) = 0;
      virtual HRESULT __stdcall get_Trace (
        /*[out,retval]*/ long * plTrace ) = 0;
      virtual HRESULT __stdcall put_Trace (
        /*[in]*/ long plTrace ) = 0;
      virtual HRESULT __stdcall get_Priority (
        /*[out,retval]*/ long * plPriority ) = 0;
      virtual HRESULT __stdcall put_Priority (
        /*[in]*/ long plPriority ) = 0;
      virtual HRESULT __stdcall get_Journal (
        /*[out,retval]*/ long * plJournal ) = 0;
      virtual HRESULT __stdcall put_Journal (
        /*[in]*/ long plJournal ) = 0;
      virtual HRESULT __stdcall get_ResponseQueueInfo_v1 (
        /*[out,retval]*/ struct IMSMQQueueInfo * * ppqinfoResponse ) = 0;
      virtual HRESULT __stdcall putref_ResponseQueueInfo_v1 (
        /*[in]*/ struct IMSMQQueueInfo * ppqinfoResponse ) = 0;
      virtual HRESULT __stdcall get_AppSpecific (
        /*[out,retval]*/ long * plAppSpecific ) = 0;
      virtual HRESULT __stdcall put_AppSpecific (
        /*[in]*/ long plAppSpecific ) = 0;
      virtual HRESULT __stdcall get_SourceMachineGuid (
        /*[out,retval]*/ BSTR * pbstrGuidSrcMachine ) = 0;
      virtual HRESULT __stdcall get_BodyLength (
        /*[out,retval]*/ long * pcbBody ) = 0;
      virtual HRESULT __stdcall get_Body (
        /*[out,retval]*/ VARIANT * pvarBody ) = 0;
      virtual HRESULT __stdcall put_Body (
        /*[in]*/ VARIANT pvarBody ) = 0;
      virtual HRESULT __stdcall get_AdminQueueInfo_v1 (
        /*[out,retval]*/ struct IMSMQQueueInfo * * ppqinfoAdmin ) = 0;
      virtual HRESULT __stdcall putref_AdminQueueInfo_v1 (
        /*[in]*/ struct IMSMQQueueInfo * ppqinfoAdmin ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ VARIANT * pvarMsgId ) = 0;
      virtual HRESULT __stdcall get_CorrelationId (
        /*[out,retval]*/ VARIANT * pvarMsgId ) = 0;
      virtual HRESULT __stdcall put_CorrelationId (
        /*[in]*/ VARIANT pvarMsgId ) = 0;
      virtual HRESULT __stdcall get_Ack (
        /*[out,retval]*/ long * plAck ) = 0;
      virtual HRESULT __stdcall put_Ack (
        /*[in]*/ long plAck ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ BSTR * pbstrLabel ) = 0;
      virtual HRESULT __stdcall put_Label (
        /*[in]*/ BSTR pbstrLabel ) = 0;
      virtual HRESULT __stdcall get_MaxTimeToReachQueue (
        /*[out,retval]*/ long * plMaxTimeToReachQueue ) = 0;
      virtual HRESULT __stdcall put_MaxTimeToReachQueue (
        /*[in]*/ long plMaxTimeToReachQueue ) = 0;
      virtual HRESULT __stdcall get_MaxTimeToReceive (
        /*[out,retval]*/ long * plMaxTimeToReceive ) = 0;
      virtual HRESULT __stdcall put_MaxTimeToReceive (
        /*[in]*/ long plMaxTimeToReceive ) = 0;
      virtual HRESULT __stdcall get_HashAlgorithm (
        /*[out,retval]*/ long * plHashAlg ) = 0;
      virtual HRESULT __stdcall put_HashAlgorithm (
        /*[in]*/ long plHashAlg ) = 0;
      virtual HRESULT __stdcall get_EncryptAlgorithm (
        /*[out,retval]*/ long * plEncryptAlg ) = 0;
      virtual HRESULT __stdcall put_EncryptAlgorithm (
        /*[in]*/ long plEncryptAlg ) = 0;
      virtual HRESULT __stdcall get_SentTime (
        /*[out,retval]*/ VARIANT * pvarSentTime ) = 0;
      virtual HRESULT __stdcall get_ArrivedTime (
        /*[out,retval]*/ VARIANT * plArrivedTime ) = 0;
      virtual HRESULT __stdcall get_DestinationQueueInfo (
        /*[out,retval]*/ struct IMSMQQueueInfo3 * * ppqinfoDest ) = 0;
      virtual HRESULT __stdcall get_SenderCertificate (
        /*[out,retval]*/ VARIANT * pvarSenderCert ) = 0;
      virtual HRESULT __stdcall put_SenderCertificate (
        /*[in]*/ VARIANT pvarSenderCert ) = 0;
      virtual HRESULT __stdcall get_SenderId (
        /*[out,retval]*/ VARIANT * pvarSenderId ) = 0;
      virtual HRESULT __stdcall get_SenderIdType (
        /*[out,retval]*/ long * plSenderIdType ) = 0;
      virtual HRESULT __stdcall put_SenderIdType (
        /*[in]*/ long plSenderIdType ) = 0;
      virtual HRESULT __stdcall raw_Send (
        /*[in]*/ IDispatch * DestinationQueue,
        /*[in]*/ VARIANT * Transaction = &vtMissing ) = 0;
      virtual HRESULT __stdcall raw_AttachCurrentSecurityContext ( ) = 0;
      virtual HRESULT __stdcall get_SenderVersion (
        /*[out,retval]*/ long * plSenderVersion ) = 0;
      virtual HRESULT __stdcall get_Extension (
        /*[out,retval]*/ VARIANT * pvarExtension ) = 0;
      virtual HRESULT __stdcall put_Extension (
        /*[in]*/ VARIANT pvarExtension ) = 0;
      virtual HRESULT __stdcall get_ConnectorTypeGuid (
        /*[out,retval]*/ BSTR * pbstrGuidConnectorType ) = 0;
      virtual HRESULT __stdcall put_ConnectorTypeGuid (
        /*[in]*/ BSTR pbstrGuidConnectorType ) = 0;
      virtual HRESULT __stdcall get_TransactionStatusQueueInfo (
        /*[out,retval]*/ struct IMSMQQueueInfo3 * * ppqinfoXactStatus ) = 0;
      virtual HRESULT __stdcall get_DestinationSymmetricKey (
        /*[out,retval]*/ VARIANT * pvarDestSymmKey ) = 0;
      virtual HRESULT __stdcall put_DestinationSymmetricKey (
        /*[in]*/ VARIANT pvarDestSymmKey ) = 0;
      virtual HRESULT __stdcall get_Signature (
        /*[out,retval]*/ VARIANT * pvarSignature ) = 0;
      virtual HRESULT __stdcall put_Signature (
        /*[in]*/ VARIANT pvarSignature ) = 0;
      virtual HRESULT __stdcall get_AuthenticationProviderType (
        /*[out,retval]*/ long * plAuthProvType ) = 0;
      virtual HRESULT __stdcall put_AuthenticationProviderType (
        /*[in]*/ long plAuthProvType ) = 0;
      virtual HRESULT __stdcall get_AuthenticationProviderName (
        /*[out,retval]*/ BSTR * pbstrAuthProvName ) = 0;
      virtual HRESULT __stdcall put_AuthenticationProviderName (
        /*[in]*/ BSTR pbstrAuthProvName ) = 0;
      virtual HRESULT __stdcall put_SenderId (
        /*[in]*/ VARIANT pvarSenderId ) = 0;
      virtual HRESULT __stdcall get_MsgClass (
        /*[out,retval]*/ long * plMsgClass ) = 0;
      virtual HRESULT __stdcall put_MsgClass (
        /*[in]*/ long plMsgClass ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ IDispatch * * ppcolProperties ) = 0;
      virtual HRESULT __stdcall get_TransactionId (
        /*[out,retval]*/ VARIANT * pvarXactId ) = 0;
      virtual HRESULT __stdcall get_IsFirstInTransaction (
        /*[out,retval]*/ short * pisFirstInXact ) = 0;
      virtual HRESULT __stdcall get_IsLastInTransaction (
        /*[out,retval]*/ short * pisLastInXact ) = 0;
      virtual HRESULT __stdcall get_ResponseQueueInfo_v2 (
        /*[out,retval]*/ struct IMSMQQueueInfo2 * * ppqinfoResponse ) = 0;
      virtual HRESULT __stdcall putref_ResponseQueueInfo_v2 (
        /*[in]*/ struct IMSMQQueueInfo2 * ppqinfoResponse ) = 0;
      virtual HRESULT __stdcall get_AdminQueueInfo_v2 (
        /*[out,retval]*/ struct IMSMQQueueInfo2 * * ppqinfoAdmin ) = 0;
      virtual HRESULT __stdcall putref_AdminQueueInfo_v2 (
        /*[in]*/ struct IMSMQQueueInfo2 * ppqinfoAdmin ) = 0;
      virtual HRESULT __stdcall get_ReceivedAuthenticationLevel (
        /*[out,retval]*/ short * psReceivedAuthenticationLevel ) = 0;
      virtual HRESULT __stdcall get_ResponseQueueInfo (
        /*[out,retval]*/ struct IMSMQQueueInfo3 * * ppqinfoResponse ) = 0;
      virtual HRESULT __stdcall putref_ResponseQueueInfo (
        /*[in]*/ struct IMSMQQueueInfo3 * ppqinfoResponse ) = 0;
      virtual HRESULT __stdcall get_AdminQueueInfo (
        /*[out,retval]*/ struct IMSMQQueueInfo3 * * ppqinfoAdmin ) = 0;
      virtual HRESULT __stdcall putref_AdminQueueInfo (
        /*[in]*/ struct IMSMQQueueInfo3 * ppqinfoAdmin ) = 0;
      virtual HRESULT __stdcall get_ResponseDestination (
        /*[out,retval]*/ IDispatch * * ppdestResponse ) = 0;
      virtual HRESULT __stdcall putref_ResponseDestination (
        /*[in]*/ IDispatch * ppdestResponse ) = 0;
      virtual HRESULT __stdcall get_Destination (
        /*[out,retval]*/ IDispatch * * ppdestDestination ) = 0;
      virtual HRESULT __stdcall get_LookupId (
        /*[out,retval]*/ VARIANT * pvarLookupId ) = 0;
      virtual HRESULT __stdcall get_IsAuthenticated2 (
        /*[out,retval]*/ VARIANT_BOOL * pisAuthenticated ) = 0;
      virtual HRESULT __stdcall get_IsFirstInTransaction2 (
        /*[out,retval]*/ VARIANT_BOOL * pisFirstInXact ) = 0;
      virtual HRESULT __stdcall get_IsLastInTransaction2 (
        /*[out,retval]*/ VARIANT_BOOL * pisLastInXact ) = 0;
      virtual HRESULT __stdcall raw_AttachCurrentSecurityContext2 ( ) = 0;
      virtual HRESULT __stdcall get_SoapEnvelope (
        /*[out,retval]*/ BSTR * pbstrSoapEnvelope ) = 0;
      virtual HRESULT __stdcall get_CompoundMessage (
        /*[out,retval]*/ VARIANT * pvarCompoundMessage ) = 0;
      virtual HRESULT __stdcall put_SoapHeader (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall put_SoapBody (
        /*[in]*/ BSTR _arg1 ) = 0;
};

struct __declspec(uuid("eba96b1b-2168-11d3-898c-00e02c074f6b"))
IMSMQQueue3 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHandle))
    long Handle;
    __declspec(property(get=GetAccess))
    long Access;
    __declspec(property(get=GetShareMode))
    long ShareMode;
    __declspec(property(get=GetQueueInfo))
    IMSMQQueueInfo3Ptr QueueInfo;
    __declspec(property(get=GetIsOpen))
    short IsOpen;
    __declspec(property(get=GetProperties))
    IDispatchPtr Properties;
    __declspec(property(get=GetHandle2))
    _variant_t Handle2;
    __declspec(property(get=GetIsOpen2))
    VARIANT_BOOL IsOpen2;

    //
    // Wrapper methods for error-handling
    //

    long GetAccess ( );
    long GetShareMode ( );
    IMSMQQueueInfo3Ptr GetQueueInfo ( );
    long GetHandle ( );
    short GetIsOpen ( );
    HRESULT Close ( );
    IMSMQMessagePtr Receive_v1 (
        VARIANT * Transaction = &vtMissing,
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing );
    IMSMQMessagePtr Peek_v1 (
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing );
    HRESULT EnableNotification (
        struct IMSMQEvent3 * Event,
        VARIANT * Cursor = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing );
    HRESULT Reset ( );
    IMSMQMessagePtr ReceiveCurrent_v1 (
        VARIANT * Transaction = &vtMissing,
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing );
    IMSMQMessagePtr PeekNext_v1 (
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing );
    IMSMQMessagePtr PeekCurrent_v1 (
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing );
    IMSMQMessage3Ptr Receive (
        VARIANT * Transaction = &vtMissing,
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing,
        VARIANT * WantConnectorType = &vtMissing );
    IMSMQMessage3Ptr Peek (
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing,
        VARIANT * WantConnectorType = &vtMissing );
    IMSMQMessage3Ptr ReceiveCurrent (
        VARIANT * Transaction = &vtMissing,
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing,
        VARIANT * WantConnectorType = &vtMissing );
    IMSMQMessage3Ptr PeekNext (
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing,
        VARIANT * WantConnectorType = &vtMissing );
    IMSMQMessage3Ptr PeekCurrent (
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing,
        VARIANT * WantConnectorType = &vtMissing );
    IDispatchPtr GetProperties ( );
    _variant_t GetHandle2 ( );
    IMSMQMessage3Ptr ReceiveByLookupId (
        const _variant_t & LookupId,
        VARIANT * Transaction = &vtMissing,
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * WantConnectorType = &vtMissing );
    IMSMQMessage3Ptr ReceiveNextByLookupId (
        const _variant_t & LookupId,
        VARIANT * Transaction = &vtMissing,
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * WantConnectorType = &vtMissing );
    IMSMQMessage3Ptr ReceivePreviousByLookupId (
        const _variant_t & LookupId,
        VARIANT * Transaction = &vtMissing,
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * WantConnectorType = &vtMissing );
    IMSMQMessage3Ptr ReceiveFirstByLookupId (
        VARIANT * Transaction = &vtMissing,
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * WantConnectorType = &vtMissing );
    IMSMQMessage3Ptr ReceiveLastByLookupId (
        VARIANT * Transaction = &vtMissing,
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * WantConnectorType = &vtMissing );
    IMSMQMessage3Ptr PeekByLookupId (
        const _variant_t & LookupId,
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * WantConnectorType = &vtMissing );
    IMSMQMessage3Ptr PeekNextByLookupId (
        const _variant_t & LookupId,
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * WantConnectorType = &vtMissing );
    IMSMQMessage3Ptr PeekPreviousByLookupId (
        const _variant_t & LookupId,
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * WantConnectorType = &vtMissing );
    IMSMQMessage3Ptr PeekFirstByLookupId (
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * WantConnectorType = &vtMissing );
    IMSMQMessage3Ptr PeekLastByLookupId (
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * WantConnectorType = &vtMissing );
    HRESULT Purge ( );
    VARIANT_BOOL GetIsOpen2 ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Access (
        /*[out,retval]*/ long * plAccess ) = 0;
      virtual HRESULT __stdcall get_ShareMode (
        /*[out,retval]*/ long * plShareMode ) = 0;
      virtual HRESULT __stdcall get_QueueInfo (
        /*[out,retval]*/ struct IMSMQQueueInfo3 * * ppqinfo ) = 0;
      virtual HRESULT __stdcall get_Handle (
        /*[out,retval]*/ long * plHandle ) = 0;
      virtual HRESULT __stdcall get_IsOpen (
        /*[out,retval]*/ short * pisOpen ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall raw_Receive_v1 (
        /*[in]*/ VARIANT * Transaction,
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * ReceiveTimeout,
        /*[out,retval]*/ struct IMSMQMessage * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_Peek_v1 (
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * ReceiveTimeout,
        /*[out,retval]*/ struct IMSMQMessage * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_EnableNotification (
        /*[in]*/ struct IMSMQEvent3 * Event,
        /*[in]*/ VARIANT * Cursor = &vtMissing,
        /*[in]*/ VARIANT * ReceiveTimeout = &vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall raw_ReceiveCurrent_v1 (
        /*[in]*/ VARIANT * Transaction,
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * ReceiveTimeout,
        /*[out,retval]*/ struct IMSMQMessage * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_PeekNext_v1 (
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * ReceiveTimeout,
        /*[out,retval]*/ struct IMSMQMessage * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_PeekCurrent_v1 (
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * ReceiveTimeout,
        /*[out,retval]*/ struct IMSMQMessage * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_Receive (
        /*[in]*/ VARIANT * Transaction,
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * ReceiveTimeout,
        /*[in]*/ VARIANT * WantConnectorType,
        /*[out,retval]*/ struct IMSMQMessage3 * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_Peek (
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * ReceiveTimeout,
        /*[in]*/ VARIANT * WantConnectorType,
        /*[out,retval]*/ struct IMSMQMessage3 * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_ReceiveCurrent (
        /*[in]*/ VARIANT * Transaction,
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * ReceiveTimeout,
        /*[in]*/ VARIANT * WantConnectorType,
        /*[out,retval]*/ struct IMSMQMessage3 * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_PeekNext (
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * ReceiveTimeout,
        /*[in]*/ VARIANT * WantConnectorType,
        /*[out,retval]*/ struct IMSMQMessage3 * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_PeekCurrent (
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * ReceiveTimeout,
        /*[in]*/ VARIANT * WantConnectorType,
        /*[out,retval]*/ struct IMSMQMessage3 * * ppmsg ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ IDispatch * * ppcolProperties ) = 0;
      virtual HRESULT __stdcall get_Handle2 (
        /*[out,retval]*/ VARIANT * pvarHandle ) = 0;
      virtual HRESULT __stdcall raw_ReceiveByLookupId (
        /*[in]*/ VARIANT LookupId,
        /*[in]*/ VARIANT * Transaction,
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * WantConnectorType,
        /*[out,retval]*/ struct IMSMQMessage3 * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_ReceiveNextByLookupId (
        /*[in]*/ VARIANT LookupId,
        /*[in]*/ VARIANT * Transaction,
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * WantConnectorType,
        /*[out,retval]*/ struct IMSMQMessage3 * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_ReceivePreviousByLookupId (
        /*[in]*/ VARIANT LookupId,
        /*[in]*/ VARIANT * Transaction,
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * WantConnectorType,
        /*[out,retval]*/ struct IMSMQMessage3 * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_ReceiveFirstByLookupId (
        /*[in]*/ VARIANT * Transaction,
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * WantConnectorType,
        /*[out,retval]*/ struct IMSMQMessage3 * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_ReceiveLastByLookupId (
        /*[in]*/ VARIANT * Transaction,
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * WantConnectorType,
        /*[out,retval]*/ struct IMSMQMessage3 * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_PeekByLookupId (
        /*[in]*/ VARIANT LookupId,
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * WantConnectorType,
        /*[out,retval]*/ struct IMSMQMessage3 * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_PeekNextByLookupId (
        /*[in]*/ VARIANT LookupId,
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * WantConnectorType,
        /*[out,retval]*/ struct IMSMQMessage3 * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_PeekPreviousByLookupId (
        /*[in]*/ VARIANT LookupId,
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * WantConnectorType,
        /*[out,retval]*/ struct IMSMQMessage3 * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_PeekFirstByLookupId (
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * WantConnectorType,
        /*[out,retval]*/ struct IMSMQMessage3 * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_PeekLastByLookupId (
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * WantConnectorType,
        /*[out,retval]*/ struct IMSMQMessage3 * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_Purge ( ) = 0;
      virtual HRESULT __stdcall get_IsOpen2 (
        /*[out,retval]*/ VARIANT_BOOL * pisOpen ) = 0;
};

struct __declspec(uuid("eba96b1e-2168-11d3-898c-00e02c074f6b"))
IMSMQQueueInfos3 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetProperties))
    IDispatchPtr Properties;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Reset ( );
    IMSMQQueueInfo3Ptr Next ( );
    IDispatchPtr GetProperties ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall raw_Next (
        /*[out,retval]*/ struct IMSMQQueueInfo3 * * ppqinfoNext ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ IDispatch * * ppcolProperties ) = 0;
};

struct __declspec(uuid("eba96b19-2168-11d3-898c-00e02c074f6b"))
IMSMQQuery3 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetProperties))
    IDispatchPtr Properties;

    //
    // Wrapper methods for error-handling
    //

    IMSMQQueueInfos3Ptr LookupQueue_v2 (
        VARIANT * QueueGuid = &vtMissing,
        VARIANT * ServiceTypeGuid = &vtMissing,
        VARIANT * Label = &vtMissing,
        VARIANT * CreateTime = &vtMissing,
        VARIANT * ModifyTime = &vtMissing,
        VARIANT * RelServiceType = &vtMissing,
        VARIANT * RelLabel = &vtMissing,
        VARIANT * RelCreateTime = &vtMissing,
        VARIANT * RelModifyTime = &vtMissing );
    IDispatchPtr GetProperties ( );
    IMSMQQueueInfos3Ptr LookupQueue (
        VARIANT * QueueGuid = &vtMissing,
        VARIANT * ServiceTypeGuid = &vtMissing,
        VARIANT * Label = &vtMissing,
        VARIANT * CreateTime = &vtMissing,
        VARIANT * ModifyTime = &vtMissing,
        VARIANT * RelServiceType = &vtMissing,
        VARIANT * RelLabel = &vtMissing,
        VARIANT * RelCreateTime = &vtMissing,
        VARIANT * RelModifyTime = &vtMissing,
        VARIANT * MulticastAddress = &vtMissing,
        VARIANT * RelMulticastAddress = &vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_LookupQueue_v2 (
        /*[in]*/ VARIANT * QueueGuid,
        /*[in]*/ VARIANT * ServiceTypeGuid,
        /*[in]*/ VARIANT * Label,
        /*[in]*/ VARIANT * CreateTime,
        /*[in]*/ VARIANT * ModifyTime,
        /*[in]*/ VARIANT * RelServiceType,
        /*[in]*/ VARIANT * RelLabel,
        /*[in]*/ VARIANT * RelCreateTime,
        /*[in]*/ VARIANT * RelModifyTime,
        /*[out,retval]*/ struct IMSMQQueueInfos3 * * ppqinfos ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ IDispatch * * ppcolProperties ) = 0;
      virtual HRESULT __stdcall raw_LookupQueue (
        /*[in]*/ VARIANT * QueueGuid,
        /*[in]*/ VARIANT * ServiceTypeGuid,
        /*[in]*/ VARIANT * Label,
        /*[in]*/ VARIANT * CreateTime,
        /*[in]*/ VARIANT * ModifyTime,
        /*[in]*/ VARIANT * RelServiceType,
        /*[in]*/ VARIANT * RelLabel,
        /*[in]*/ VARIANT * RelCreateTime,
        /*[in]*/ VARIANT * RelModifyTime,
        /*[in]*/ VARIANT * MulticastAddress,
        /*[in]*/ VARIANT * RelMulticastAddress,
        /*[out,retval]*/ struct IMSMQQueueInfos3 * * ppqinfos ) = 0;
};

struct __declspec(uuid("eba96b21-2168-11d3-898c-00e02c074f6b"))
IMSMQQueueInfo4 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetQueueGuid))
    _bstr_t QueueGuid;
    __declspec(property(get=GetServiceTypeGuid,put=PutServiceTypeGuid))
    _bstr_t ServiceTypeGuid;
    __declspec(property(get=GetLabel,put=PutLabel))
    _bstr_t Label;
    __declspec(property(get=GetPathName,put=PutPathName))
    _bstr_t PathName;
    __declspec(property(get=GetFormatName,put=PutFormatName))
    _bstr_t FormatName;
    __declspec(property(get=GetIsTransactional))
    short IsTransactional;
    __declspec(property(get=GetPrivLevel,put=PutPrivLevel))
    long PrivLevel;
    __declspec(property(get=GetJournal,put=PutJournal))
    long Journal;
    __declspec(property(get=GetBasePriority,put=PutBasePriority))
    long BasePriority;
    __declspec(property(get=GetCreateTime))
    _variant_t CreateTime;
    __declspec(property(get=GetModifyTime))
    _variant_t ModifyTime;
    __declspec(property(get=GetAuthenticate,put=PutAuthenticate))
    long Authenticate;
    __declspec(property(get=GetQuota,put=PutQuota))
    long Quota;
    __declspec(property(get=GetJournalQuota,put=PutJournalQuota))
    long JournalQuota;
    __declspec(property(get=GetIsWorldReadable))
    short IsWorldReadable;
    __declspec(property(get=GetPathNameDNS))
    _bstr_t PathNameDNS;
    __declspec(property(get=GetProperties))
    IDispatchPtr Properties;
    __declspec(property(get=GetSecurity,put=PutSecurity))
    _variant_t Security;
    __declspec(property(get=GetADsPath))
    _bstr_t ADsPath;
    __declspec(property(get=GetIsTransactional2))
    VARIANT_BOOL IsTransactional2;
    __declspec(property(get=GetIsWorldReadable2))
    VARIANT_BOOL IsWorldReadable2;
    __declspec(property(get=GetMulticastAddress,put=PutMulticastAddress))
    _bstr_t MulticastAddress;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetQueueGuid ( );
    _bstr_t GetServiceTypeGuid ( );
    void PutServiceTypeGuid (
        _bstr_t pbstrGuidServiceType );
    _bstr_t GetLabel ( );
    void PutLabel (
        _bstr_t pbstrLabel );
    _bstr_t GetPathName ( );
    void PutPathName (
        _bstr_t pbstrPathName );
    _bstr_t GetFormatName ( );
    void PutFormatName (
        _bstr_t pbstrFormatName );
    short GetIsTransactional ( );
    long GetPrivLevel ( );
    void PutPrivLevel (
        long plPrivLevel );
    long GetJournal ( );
    void PutJournal (
        long plJournal );
    long GetQuota ( );
    void PutQuota (
        long plQuota );
    long GetBasePriority ( );
    void PutBasePriority (
        long plBasePriority );
    _variant_t GetCreateTime ( );
    _variant_t GetModifyTime ( );
    long GetAuthenticate ( );
    void PutAuthenticate (
        long plAuthenticate );
    long GetJournalQuota ( );
    void PutJournalQuota (
        long plJournalQuota );
    short GetIsWorldReadable ( );
    HRESULT Create (
        VARIANT * IsTransactional = &vtMissing,
        VARIANT * IsWorldReadable = &vtMissing );
    HRESULT Delete ( );
    IMSMQQueue4Ptr Open (
        long Access,
        long ShareMode );
    HRESULT Refresh ( );
    HRESULT Update ( );
    _bstr_t GetPathNameDNS ( );
    IDispatchPtr GetProperties ( );
    _variant_t GetSecurity ( );
    void PutSecurity (
        const _variant_t & pvarSecurity );
    VARIANT_BOOL GetIsTransactional2 ( );
    VARIANT_BOOL GetIsWorldReadable2 ( );
    _bstr_t GetMulticastAddress ( );
    void PutMulticastAddress (
        _bstr_t pbstrMulticastAddress );
    _bstr_t GetADsPath ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_QueueGuid (
        /*[out,retval]*/ BSTR * pbstrGuidQueue ) = 0;
      virtual HRESULT __stdcall get_ServiceTypeGuid (
        /*[out,retval]*/ BSTR * pbstrGuidServiceType ) = 0;
      virtual HRESULT __stdcall put_ServiceTypeGuid (
        /*[in]*/ BSTR pbstrGuidServiceType ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ BSTR * pbstrLabel ) = 0;
      virtual HRESULT __stdcall put_Label (
        /*[in]*/ BSTR pbstrLabel ) = 0;
      virtual HRESULT __stdcall get_PathName (
        /*[out,retval]*/ BSTR * pbstrPathName ) = 0;
      virtual HRESULT __stdcall put_PathName (
        /*[in]*/ BSTR pbstrPathName ) = 0;
      virtual HRESULT __stdcall get_FormatName (
        /*[out,retval]*/ BSTR * pbstrFormatName ) = 0;
      virtual HRESULT __stdcall put_FormatName (
        /*[in]*/ BSTR pbstrFormatName ) = 0;
      virtual HRESULT __stdcall get_IsTransactional (
        /*[out,retval]*/ short * pisTransactional ) = 0;
      virtual HRESULT __stdcall get_PrivLevel (
        /*[out,retval]*/ long * plPrivLevel ) = 0;
      virtual HRESULT __stdcall put_PrivLevel (
        /*[in]*/ long plPrivLevel ) = 0;
      virtual HRESULT __stdcall get_Journal (
        /*[out,retval]*/ long * plJournal ) = 0;
      virtual HRESULT __stdcall put_Journal (
        /*[in]*/ long plJournal ) = 0;
      virtual HRESULT __stdcall get_Quota (
        /*[out,retval]*/ long * plQuota ) = 0;
      virtual HRESULT __stdcall put_Quota (
        /*[in]*/ long plQuota ) = 0;
      virtual HRESULT __stdcall get_BasePriority (
        /*[out,retval]*/ long * plBasePriority ) = 0;
      virtual HRESULT __stdcall put_BasePriority (
        /*[in]*/ long plBasePriority ) = 0;
      virtual HRESULT __stdcall get_CreateTime (
        /*[out,retval]*/ VARIANT * pvarCreateTime ) = 0;
      virtual HRESULT __stdcall get_ModifyTime (
        /*[out,retval]*/ VARIANT * pvarModifyTime ) = 0;
      virtual HRESULT __stdcall get_Authenticate (
        /*[out,retval]*/ long * plAuthenticate ) = 0;
      virtual HRESULT __stdcall put_Authenticate (
        /*[in]*/ long plAuthenticate ) = 0;
      virtual HRESULT __stdcall get_JournalQuota (
        /*[out,retval]*/ long * plJournalQuota ) = 0;
      virtual HRESULT __stdcall put_JournalQuota (
        /*[in]*/ long plJournalQuota ) = 0;
      virtual HRESULT __stdcall get_IsWorldReadable (
        /*[out,retval]*/ short * pisWorldReadable ) = 0;
      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ VARIANT * IsTransactional = &vtMissing,
        /*[in]*/ VARIANT * IsWorldReadable = &vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Open (
        /*[in]*/ long Access,
        /*[in]*/ long ShareMode,
        /*[out,retval]*/ struct IMSMQQueue4 * * ppq ) = 0;
      virtual HRESULT __stdcall raw_Refresh ( ) = 0;
      virtual HRESULT __stdcall raw_Update ( ) = 0;
      virtual HRESULT __stdcall get_PathNameDNS (
        /*[out,retval]*/ BSTR * pbstrPathNameDNS ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ IDispatch * * ppcolProperties ) = 0;
      virtual HRESULT __stdcall get_Security (
        /*[out,retval]*/ VARIANT * pvarSecurity ) = 0;
      virtual HRESULT __stdcall put_Security (
        /*[in]*/ VARIANT pvarSecurity ) = 0;
      virtual HRESULT __stdcall get_IsTransactional2 (
        /*[out,retval]*/ VARIANT_BOOL * pisTransactional ) = 0;
      virtual HRESULT __stdcall get_IsWorldReadable2 (
        /*[out,retval]*/ VARIANT_BOOL * pisWorldReadable ) = 0;
      virtual HRESULT __stdcall get_MulticastAddress (
        /*[out,retval]*/ BSTR * pbstrMulticastAddress ) = 0;
      virtual HRESULT __stdcall put_MulticastAddress (
        /*[in]*/ BSTR pbstrMulticastAddress ) = 0;
      virtual HRESULT __stdcall get_ADsPath (
        /*[out,retval]*/ BSTR * pbstrADsPath ) = 0;
};

struct __declspec(uuid("eba96b23-2168-11d3-898c-00e02c074f6b"))
IMSMQMessage4 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBody,put=PutBody))
    _variant_t Body;
    __declspec(property(get=GetDelivery,put=PutDelivery))
    long Delivery;
    __declspec(property(get=GetPriority,put=PutPriority))
    long Priority;
    __declspec(property(get=GetJournal,put=PutJournal))
    long Journal;
    __declspec(property(get=GetResponseQueueInfo_v1,put=PutRefResponseQueueInfo_v1))
    IMSMQQueueInfoPtr ResponseQueueInfo_v1;
    __declspec(property(get=GetAppSpecific,put=PutAppSpecific))
    long AppSpecific;
    __declspec(property(get=GetSourceMachineGuid))
    _bstr_t SourceMachineGuid;
    __declspec(property(get=GetClass))
    long Class;
    __declspec(property(get=GetAdminQueueInfo_v1,put=PutRefAdminQueueInfo_v1))
    IMSMQQueueInfoPtr AdminQueueInfo_v1;
    __declspec(property(get=GetId))
    _variant_t Id;
    __declspec(property(get=GetCorrelationId,put=PutCorrelationId))
    _variant_t CorrelationId;
    __declspec(property(get=GetAck,put=PutAck))
    long Ack;
    __declspec(property(get=GetLabel,put=PutLabel))
    _bstr_t Label;
    __declspec(property(get=GetBodyLength))
    long BodyLength;
    __declspec(property(get=GetMaxTimeToReachQueue,put=PutMaxTimeToReachQueue))
    long MaxTimeToReachQueue;
    __declspec(property(get=GetMaxTimeToReceive,put=PutMaxTimeToReceive))
    long MaxTimeToReceive;
    __declspec(property(get=GetEncryptAlgorithm,put=PutEncryptAlgorithm))
    long EncryptAlgorithm;
    __declspec(property(get=GetHashAlgorithm,put=PutHashAlgorithm))
    long HashAlgorithm;
    __declspec(property(get=GetSentTime))
    _variant_t SentTime;
    __declspec(property(get=GetArrivedTime))
    _variant_t ArrivedTime;
    __declspec(property(get=GetDestinationQueueInfo))
    IMSMQQueueInfo4Ptr DestinationQueueInfo;
    __declspec(property(get=GetSenderCertificate,put=PutSenderCertificate))
    _variant_t SenderCertificate;
    __declspec(property(get=GetSenderId,put=PutSenderId))
    _variant_t SenderId;
    __declspec(property(get=GetSenderIdType,put=PutSenderIdType))
    long SenderIdType;
    __declspec(property(get=GetTrace,put=PutTrace))
    long Trace;
    __declspec(property(get=GetPrivLevel,put=PutPrivLevel))
    long PrivLevel;
    __declspec(property(get=GetAuthLevel,put=PutAuthLevel))
    long AuthLevel;
    __declspec(property(get=GetIsAuthenticated))
    short IsAuthenticated;
    __declspec(property(get=GetSenderVersion))
    long SenderVersion;
    __declspec(property(get=GetExtension,put=PutExtension))
    _variant_t Extension;
    __declspec(property(get=GetConnectorTypeGuid,put=PutConnectorTypeGuid))
    _bstr_t ConnectorTypeGuid;
    __declspec(property(get=GetTransactionStatusQueueInfo))
    IMSMQQueueInfo4Ptr TransactionStatusQueueInfo;
    __declspec(property(get=GetDestinationSymmetricKey,put=PutDestinationSymmetricKey))
    _variant_t DestinationSymmetricKey;
    __declspec(property(get=GetSignature,put=PutSignature))
    _variant_t Signature;
    __declspec(property(get=GetAuthenticationProviderType,put=PutAuthenticationProviderType))
    long AuthenticationProviderType;
    __declspec(property(get=GetAuthenticationProviderName,put=PutAuthenticationProviderName))
    _bstr_t AuthenticationProviderName;
    __declspec(property(get=GetMsgClass,put=PutMsgClass))
    long MsgClass;
    __declspec(property(get=GetProperties))
    IDispatchPtr Properties;
    __declspec(property(get=GetTransactionId))
    _variant_t TransactionId;
    __declspec(property(get=GetIsFirstInTransaction))
    short IsFirstInTransaction;
    __declspec(property(get=GetIsLastInTransaction))
    short IsLastInTransaction;
    __declspec(property(get=GetResponseQueueInfo_v2,put=PutRefResponseQueueInfo_v2))
    IMSMQQueueInfo2Ptr ResponseQueueInfo_v2;
    __declspec(property(get=GetAdminQueueInfo_v2,put=PutRefAdminQueueInfo_v2))
    IMSMQQueueInfo2Ptr AdminQueueInfo_v2;
    __declspec(property(get=GetReceivedAuthenticationLevel))
    short ReceivedAuthenticationLevel;
    __declspec(property(get=GetResponseQueueInfo,put=PutRefResponseQueueInfo))
    IMSMQQueueInfo4Ptr ResponseQueueInfo;
    __declspec(property(get=GetAdminQueueInfo,put=PutRefAdminQueueInfo))
    IMSMQQueueInfo4Ptr AdminQueueInfo;
    __declspec(property(get=GetResponseDestination,put=PutRefResponseDestination))
    IDispatchPtr ResponseDestination;
    __declspec(property(get=GetDestination))
    IDispatchPtr Destination;
    __declspec(property(get=GetLookupId))
    _variant_t LookupId;
    __declspec(property(get=GetIsAuthenticated2))
    VARIANT_BOOL IsAuthenticated2;
    __declspec(property(get=GetIsFirstInTransaction2))
    VARIANT_BOOL IsFirstInTransaction2;
    __declspec(property(get=GetIsLastInTransaction2))
    VARIANT_BOOL IsLastInTransaction2;
    __declspec(property(get=GetSoapEnvelope))
    _bstr_t SoapEnvelope;
    __declspec(property(get=GetCompoundMessage))
    _variant_t CompoundMessage;
    __declspec(property(put=PutSoapHeader))
    _bstr_t SoapHeader;
    __declspec(property(put=PutSoapBody))
    _bstr_t SoapBody;

    //
    // Wrapper methods for error-handling
    //

    long GetClass ( );
    long GetPrivLevel ( );
    void PutPrivLevel (
        long plPrivLevel );
    long GetAuthLevel ( );
    void PutAuthLevel (
        long plAuthLevel );
    short GetIsAuthenticated ( );
    long GetDelivery ( );
    void PutDelivery (
        long plDelivery );
    long GetTrace ( );
    void PutTrace (
        long plTrace );
    long GetPriority ( );
    void PutPriority (
        long plPriority );
    long GetJournal ( );
    void PutJournal (
        long plJournal );
    IMSMQQueueInfoPtr GetResponseQueueInfo_v1 ( );
    void PutRefResponseQueueInfo_v1 (
        struct IMSMQQueueInfo * ppqinfoResponse );
    long GetAppSpecific ( );
    void PutAppSpecific (
        long plAppSpecific );
    _bstr_t GetSourceMachineGuid ( );
    long GetBodyLength ( );
    _variant_t GetBody ( );
    void PutBody (
        const _variant_t & pvarBody );
    IMSMQQueueInfoPtr GetAdminQueueInfo_v1 ( );
    void PutRefAdminQueueInfo_v1 (
        struct IMSMQQueueInfo * ppqinfoAdmin );
    _variant_t GetId ( );
    _variant_t GetCorrelationId ( );
    void PutCorrelationId (
        const _variant_t & pvarMsgId );
    long GetAck ( );
    void PutAck (
        long plAck );
    _bstr_t GetLabel ( );
    void PutLabel (
        _bstr_t pbstrLabel );
    long GetMaxTimeToReachQueue ( );
    void PutMaxTimeToReachQueue (
        long plMaxTimeToReachQueue );
    long GetMaxTimeToReceive ( );
    void PutMaxTimeToReceive (
        long plMaxTimeToReceive );
    long GetHashAlgorithm ( );
    void PutHashAlgorithm (
        long plHashAlg );
    long GetEncryptAlgorithm ( );
    void PutEncryptAlgorithm (
        long plEncryptAlg );
    _variant_t GetSentTime ( );
    _variant_t GetArrivedTime ( );
    IMSMQQueueInfo4Ptr GetDestinationQueueInfo ( );
    _variant_t GetSenderCertificate ( );
    void PutSenderCertificate (
        const _variant_t & pvarSenderCert );
    _variant_t GetSenderId ( );
    long GetSenderIdType ( );
    void PutSenderIdType (
        long plSenderIdType );
    HRESULT Send (
        IDispatch * DestinationQueue,
        VARIANT * Transaction = &vtMissing );
    HRESULT AttachCurrentSecurityContext ( );
    long GetSenderVersion ( );
    _variant_t GetExtension ( );
    void PutExtension (
        const _variant_t & pvarExtension );
    _bstr_t GetConnectorTypeGuid ( );
    void PutConnectorTypeGuid (
        _bstr_t pbstrGuidConnectorType );
    IMSMQQueueInfo4Ptr GetTransactionStatusQueueInfo ( );
    _variant_t GetDestinationSymmetricKey ( );
    void PutDestinationSymmetricKey (
        const _variant_t & pvarDestSymmKey );
    _variant_t GetSignature ( );
    void PutSignature (
        const _variant_t & pvarSignature );
    long GetAuthenticationProviderType ( );
    void PutAuthenticationProviderType (
        long plAuthProvType );
    _bstr_t GetAuthenticationProviderName ( );
    void PutAuthenticationProviderName (
        _bstr_t pbstrAuthProvName );
    void PutSenderId (
        const _variant_t & pvarSenderId );
    long GetMsgClass ( );
    void PutMsgClass (
        long plMsgClass );
    IDispatchPtr GetProperties ( );
    _variant_t GetTransactionId ( );
    short GetIsFirstInTransaction ( );
    short GetIsLastInTransaction ( );
    IMSMQQueueInfo2Ptr GetResponseQueueInfo_v2 ( );
    void PutRefResponseQueueInfo_v2 (
        struct IMSMQQueueInfo2 * ppqinfoResponse );
    IMSMQQueueInfo2Ptr GetAdminQueueInfo_v2 ( );
    void PutRefAdminQueueInfo_v2 (
        struct IMSMQQueueInfo2 * ppqinfoAdmin );
    short GetReceivedAuthenticationLevel ( );
    IMSMQQueueInfo4Ptr GetResponseQueueInfo ( );
    void PutRefResponseQueueInfo (
        struct IMSMQQueueInfo4 * ppqinfoResponse );
    IMSMQQueueInfo4Ptr GetAdminQueueInfo ( );
    void PutRefAdminQueueInfo (
        struct IMSMQQueueInfo4 * ppqinfoAdmin );
    IDispatchPtr GetResponseDestination ( );
    void PutRefResponseDestination (
        IDispatch * ppdestResponse );
    IDispatchPtr GetDestination ( );
    _variant_t GetLookupId ( );
    VARIANT_BOOL GetIsAuthenticated2 ( );
    VARIANT_BOOL GetIsFirstInTransaction2 ( );
    VARIANT_BOOL GetIsLastInTransaction2 ( );
    HRESULT AttachCurrentSecurityContext2 ( );
    _bstr_t GetSoapEnvelope ( );
    _variant_t GetCompoundMessage ( );
    void PutSoapHeader (
        _bstr_t _arg1 );
    void PutSoapBody (
        _bstr_t _arg1 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Class (
        /*[out,retval]*/ long * plClass ) = 0;
      virtual HRESULT __stdcall get_PrivLevel (
        /*[out,retval]*/ long * plPrivLevel ) = 0;
      virtual HRESULT __stdcall put_PrivLevel (
        /*[in]*/ long plPrivLevel ) = 0;
      virtual HRESULT __stdcall get_AuthLevel (
        /*[out,retval]*/ long * plAuthLevel ) = 0;
      virtual HRESULT __stdcall put_AuthLevel (
        /*[in]*/ long plAuthLevel ) = 0;
      virtual HRESULT __stdcall get_IsAuthenticated (
        /*[out,retval]*/ short * pisAuthenticated ) = 0;
      virtual HRESULT __stdcall get_Delivery (
        /*[out,retval]*/ long * plDelivery ) = 0;
      virtual HRESULT __stdcall put_Delivery (
        /*[in]*/ long plDelivery ) = 0;
      virtual HRESULT __stdcall get_Trace (
        /*[out,retval]*/ long * plTrace ) = 0;
      virtual HRESULT __stdcall put_Trace (
        /*[in]*/ long plTrace ) = 0;
      virtual HRESULT __stdcall get_Priority (
        /*[out,retval]*/ long * plPriority ) = 0;
      virtual HRESULT __stdcall put_Priority (
        /*[in]*/ long plPriority ) = 0;
      virtual HRESULT __stdcall get_Journal (
        /*[out,retval]*/ long * plJournal ) = 0;
      virtual HRESULT __stdcall put_Journal (
        /*[in]*/ long plJournal ) = 0;
      virtual HRESULT __stdcall get_ResponseQueueInfo_v1 (
        /*[out,retval]*/ struct IMSMQQueueInfo * * ppqinfoResponse ) = 0;
      virtual HRESULT __stdcall putref_ResponseQueueInfo_v1 (
        /*[in]*/ struct IMSMQQueueInfo * ppqinfoResponse ) = 0;
      virtual HRESULT __stdcall get_AppSpecific (
        /*[out,retval]*/ long * plAppSpecific ) = 0;
      virtual HRESULT __stdcall put_AppSpecific (
        /*[in]*/ long plAppSpecific ) = 0;
      virtual HRESULT __stdcall get_SourceMachineGuid (
        /*[out,retval]*/ BSTR * pbstrGuidSrcMachine ) = 0;
      virtual HRESULT __stdcall get_BodyLength (
        /*[out,retval]*/ long * pcbBody ) = 0;
      virtual HRESULT __stdcall get_Body (
        /*[out,retval]*/ VARIANT * pvarBody ) = 0;
      virtual HRESULT __stdcall put_Body (
        /*[in]*/ VARIANT pvarBody ) = 0;
      virtual HRESULT __stdcall get_AdminQueueInfo_v1 (
        /*[out,retval]*/ struct IMSMQQueueInfo * * ppqinfoAdmin ) = 0;
      virtual HRESULT __stdcall putref_AdminQueueInfo_v1 (
        /*[in]*/ struct IMSMQQueueInfo * ppqinfoAdmin ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ VARIANT * pvarMsgId ) = 0;
      virtual HRESULT __stdcall get_CorrelationId (
        /*[out,retval]*/ VARIANT * pvarMsgId ) = 0;
      virtual HRESULT __stdcall put_CorrelationId (
        /*[in]*/ VARIANT pvarMsgId ) = 0;
      virtual HRESULT __stdcall get_Ack (
        /*[out,retval]*/ long * plAck ) = 0;
      virtual HRESULT __stdcall put_Ack (
        /*[in]*/ long plAck ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ BSTR * pbstrLabel ) = 0;
      virtual HRESULT __stdcall put_Label (
        /*[in]*/ BSTR pbstrLabel ) = 0;
      virtual HRESULT __stdcall get_MaxTimeToReachQueue (
        /*[out,retval]*/ long * plMaxTimeToReachQueue ) = 0;
      virtual HRESULT __stdcall put_MaxTimeToReachQueue (
        /*[in]*/ long plMaxTimeToReachQueue ) = 0;
      virtual HRESULT __stdcall get_MaxTimeToReceive (
        /*[out,retval]*/ long * plMaxTimeToReceive ) = 0;
      virtual HRESULT __stdcall put_MaxTimeToReceive (
        /*[in]*/ long plMaxTimeToReceive ) = 0;
      virtual HRESULT __stdcall get_HashAlgorithm (
        /*[out,retval]*/ long * plHashAlg ) = 0;
      virtual HRESULT __stdcall put_HashAlgorithm (
        /*[in]*/ long plHashAlg ) = 0;
      virtual HRESULT __stdcall get_EncryptAlgorithm (
        /*[out,retval]*/ long * plEncryptAlg ) = 0;
      virtual HRESULT __stdcall put_EncryptAlgorithm (
        /*[in]*/ long plEncryptAlg ) = 0;
      virtual HRESULT __stdcall get_SentTime (
        /*[out,retval]*/ VARIANT * pvarSentTime ) = 0;
      virtual HRESULT __stdcall get_ArrivedTime (
        /*[out,retval]*/ VARIANT * plArrivedTime ) = 0;
      virtual HRESULT __stdcall get_DestinationQueueInfo (
        /*[out,retval]*/ struct IMSMQQueueInfo4 * * ppqinfoDest ) = 0;
      virtual HRESULT __stdcall get_SenderCertificate (
        /*[out,retval]*/ VARIANT * pvarSenderCert ) = 0;
      virtual HRESULT __stdcall put_SenderCertificate (
        /*[in]*/ VARIANT pvarSenderCert ) = 0;
      virtual HRESULT __stdcall get_SenderId (
        /*[out,retval]*/ VARIANT * pvarSenderId ) = 0;
      virtual HRESULT __stdcall get_SenderIdType (
        /*[out,retval]*/ long * plSenderIdType ) = 0;
      virtual HRESULT __stdcall put_SenderIdType (
        /*[in]*/ long plSenderIdType ) = 0;
      virtual HRESULT __stdcall raw_Send (
        /*[in]*/ IDispatch * DestinationQueue,
        /*[in]*/ VARIANT * Transaction = &vtMissing ) = 0;
      virtual HRESULT __stdcall raw_AttachCurrentSecurityContext ( ) = 0;
      virtual HRESULT __stdcall get_SenderVersion (
        /*[out,retval]*/ long * plSenderVersion ) = 0;
      virtual HRESULT __stdcall get_Extension (
        /*[out,retval]*/ VARIANT * pvarExtension ) = 0;
      virtual HRESULT __stdcall put_Extension (
        /*[in]*/ VARIANT pvarExtension ) = 0;
      virtual HRESULT __stdcall get_ConnectorTypeGuid (
        /*[out,retval]*/ BSTR * pbstrGuidConnectorType ) = 0;
      virtual HRESULT __stdcall put_ConnectorTypeGuid (
        /*[in]*/ BSTR pbstrGuidConnectorType ) = 0;
      virtual HRESULT __stdcall get_TransactionStatusQueueInfo (
        /*[out,retval]*/ struct IMSMQQueueInfo4 * * ppqinfoXactStatus ) = 0;
      virtual HRESULT __stdcall get_DestinationSymmetricKey (
        /*[out,retval]*/ VARIANT * pvarDestSymmKey ) = 0;
      virtual HRESULT __stdcall put_DestinationSymmetricKey (
        /*[in]*/ VARIANT pvarDestSymmKey ) = 0;
      virtual HRESULT __stdcall get_Signature (
        /*[out,retval]*/ VARIANT * pvarSignature ) = 0;
      virtual HRESULT __stdcall put_Signature (
        /*[in]*/ VARIANT pvarSignature ) = 0;
      virtual HRESULT __stdcall get_AuthenticationProviderType (
        /*[out,retval]*/ long * plAuthProvType ) = 0;
      virtual HRESULT __stdcall put_AuthenticationProviderType (
        /*[in]*/ long plAuthProvType ) = 0;
      virtual HRESULT __stdcall get_AuthenticationProviderName (
        /*[out,retval]*/ BSTR * pbstrAuthProvName ) = 0;
      virtual HRESULT __stdcall put_AuthenticationProviderName (
        /*[in]*/ BSTR pbstrAuthProvName ) = 0;
      virtual HRESULT __stdcall put_SenderId (
        /*[in]*/ VARIANT pvarSenderId ) = 0;
      virtual HRESULT __stdcall get_MsgClass (
        /*[out,retval]*/ long * plMsgClass ) = 0;
      virtual HRESULT __stdcall put_MsgClass (
        /*[in]*/ long plMsgClass ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ IDispatch * * ppcolProperties ) = 0;
      virtual HRESULT __stdcall get_TransactionId (
        /*[out,retval]*/ VARIANT * pvarXactId ) = 0;
      virtual HRESULT __stdcall get_IsFirstInTransaction (
        /*[out,retval]*/ short * pisFirstInXact ) = 0;
      virtual HRESULT __stdcall get_IsLastInTransaction (
        /*[out,retval]*/ short * pisLastInXact ) = 0;
      virtual HRESULT __stdcall get_ResponseQueueInfo_v2 (
        /*[out,retval]*/ struct IMSMQQueueInfo2 * * ppqinfoResponse ) = 0;
      virtual HRESULT __stdcall putref_ResponseQueueInfo_v2 (
        /*[in]*/ struct IMSMQQueueInfo2 * ppqinfoResponse ) = 0;
      virtual HRESULT __stdcall get_AdminQueueInfo_v2 (
        /*[out,retval]*/ struct IMSMQQueueInfo2 * * ppqinfoAdmin ) = 0;
      virtual HRESULT __stdcall putref_AdminQueueInfo_v2 (
        /*[in]*/ struct IMSMQQueueInfo2 * ppqinfoAdmin ) = 0;
      virtual HRESULT __stdcall get_ReceivedAuthenticationLevel (
        /*[out,retval]*/ short * psReceivedAuthenticationLevel ) = 0;
      virtual HRESULT __stdcall get_ResponseQueueInfo (
        /*[out,retval]*/ struct IMSMQQueueInfo4 * * ppqinfoResponse ) = 0;
      virtual HRESULT __stdcall putref_ResponseQueueInfo (
        /*[in]*/ struct IMSMQQueueInfo4 * ppqinfoResponse ) = 0;
      virtual HRESULT __stdcall get_AdminQueueInfo (
        /*[out,retval]*/ struct IMSMQQueueInfo4 * * ppqinfoAdmin ) = 0;
      virtual HRESULT __stdcall putref_AdminQueueInfo (
        /*[in]*/ struct IMSMQQueueInfo4 * ppqinfoAdmin ) = 0;
      virtual HRESULT __stdcall get_ResponseDestination (
        /*[out,retval]*/ IDispatch * * ppdestResponse ) = 0;
      virtual HRESULT __stdcall putref_ResponseDestination (
        /*[in]*/ IDispatch * ppdestResponse ) = 0;
      virtual HRESULT __stdcall get_Destination (
        /*[out,retval]*/ IDispatch * * ppdestDestination ) = 0;
      virtual HRESULT __stdcall get_LookupId (
        /*[out,retval]*/ VARIANT * pvarLookupId ) = 0;
      virtual HRESULT __stdcall get_IsAuthenticated2 (
        /*[out,retval]*/ VARIANT_BOOL * pisAuthenticated ) = 0;
      virtual HRESULT __stdcall get_IsFirstInTransaction2 (
        /*[out,retval]*/ VARIANT_BOOL * pisFirstInXact ) = 0;
      virtual HRESULT __stdcall get_IsLastInTransaction2 (
        /*[out,retval]*/ VARIANT_BOOL * pisLastInXact ) = 0;
      virtual HRESULT __stdcall raw_AttachCurrentSecurityContext2 ( ) = 0;
      virtual HRESULT __stdcall get_SoapEnvelope (
        /*[out,retval]*/ BSTR * pbstrSoapEnvelope ) = 0;
      virtual HRESULT __stdcall get_CompoundMessage (
        /*[out,retval]*/ VARIANT * pvarCompoundMessage ) = 0;
      virtual HRESULT __stdcall put_SoapHeader (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall put_SoapBody (
        /*[in]*/ BSTR _arg1 ) = 0;
};

struct __declspec(uuid("eba96b20-2168-11d3-898c-00e02c074f6b"))
IMSMQQueue4 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHandle))
    long Handle;
    __declspec(property(get=GetAccess))
    long Access;
    __declspec(property(get=GetShareMode))
    long ShareMode;
    __declspec(property(get=GetQueueInfo))
    IMSMQQueueInfo4Ptr QueueInfo;
    __declspec(property(get=GetIsOpen))
    short IsOpen;
    __declspec(property(get=GetProperties))
    IDispatchPtr Properties;
    __declspec(property(get=GetHandle2))
    _variant_t Handle2;
    __declspec(property(get=GetIsOpen2))
    VARIANT_BOOL IsOpen2;

    //
    // Wrapper methods for error-handling
    //

    long GetAccess ( );
    long GetShareMode ( );
    IMSMQQueueInfo4Ptr GetQueueInfo ( );
    long GetHandle ( );
    short GetIsOpen ( );
    HRESULT Close ( );
    IMSMQMessagePtr Receive_v1 (
        VARIANT * Transaction = &vtMissing,
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing );
    IMSMQMessagePtr Peek_v1 (
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing );
    HRESULT EnableNotification (
        struct IMSMQEvent3 * Event,
        VARIANT * Cursor = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing );
    HRESULT Reset ( );
    IMSMQMessagePtr ReceiveCurrent_v1 (
        VARIANT * Transaction = &vtMissing,
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing );
    IMSMQMessagePtr PeekNext_v1 (
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing );
    IMSMQMessagePtr PeekCurrent_v1 (
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing );
    IMSMQMessage4Ptr Receive (
        VARIANT * Transaction = &vtMissing,
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing,
        VARIANT * WantConnectorType = &vtMissing );
    IMSMQMessage4Ptr Peek (
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing,
        VARIANT * WantConnectorType = &vtMissing );
    IMSMQMessage4Ptr ReceiveCurrent (
        VARIANT * Transaction = &vtMissing,
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing,
        VARIANT * WantConnectorType = &vtMissing );
    IMSMQMessage4Ptr PeekNext (
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing,
        VARIANT * WantConnectorType = &vtMissing );
    IMSMQMessage4Ptr PeekCurrent (
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * ReceiveTimeout = &vtMissing,
        VARIANT * WantConnectorType = &vtMissing );
    IDispatchPtr GetProperties ( );
    _variant_t GetHandle2 ( );
    IMSMQMessage4Ptr ReceiveByLookupId (
        const _variant_t & LookupId,
        VARIANT * Transaction = &vtMissing,
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * WantConnectorType = &vtMissing );
    IMSMQMessage4Ptr ReceiveNextByLookupId (
        const _variant_t & LookupId,
        VARIANT * Transaction = &vtMissing,
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * WantConnectorType = &vtMissing );
    IMSMQMessage4Ptr ReceivePreviousByLookupId (
        const _variant_t & LookupId,
        VARIANT * Transaction = &vtMissing,
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * WantConnectorType = &vtMissing );
    IMSMQMessage4Ptr ReceiveFirstByLookupId (
        VARIANT * Transaction = &vtMissing,
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * WantConnectorType = &vtMissing );
    IMSMQMessage4Ptr ReceiveLastByLookupId (
        VARIANT * Transaction = &vtMissing,
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * WantConnectorType = &vtMissing );
    IMSMQMessage4Ptr PeekByLookupId (
        const _variant_t & LookupId,
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * WantConnectorType = &vtMissing );
    IMSMQMessage4Ptr PeekNextByLookupId (
        const _variant_t & LookupId,
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * WantConnectorType = &vtMissing );
    IMSMQMessage4Ptr PeekPreviousByLookupId (
        const _variant_t & LookupId,
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * WantConnectorType = &vtMissing );
    IMSMQMessage4Ptr PeekFirstByLookupId (
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * WantConnectorType = &vtMissing );
    IMSMQMessage4Ptr PeekLastByLookupId (
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * WantConnectorType = &vtMissing );
    HRESULT Purge ( );
    VARIANT_BOOL GetIsOpen2 ( );
    IMSMQMessage4Ptr ReceiveByLookupIdAllowPeek (
        const _variant_t & LookupId,
        VARIANT * Transaction = &vtMissing,
        VARIANT * WantDestinationQueue = &vtMissing,
        VARIANT * WantBody = &vtMissing,
        VARIANT * WantConnectorType = &vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Access (
        /*[out,retval]*/ long * plAccess ) = 0;
      virtual HRESULT __stdcall get_ShareMode (
        /*[out,retval]*/ long * plShareMode ) = 0;
      virtual HRESULT __stdcall get_QueueInfo (
        /*[out,retval]*/ struct IMSMQQueueInfo4 * * ppqinfo ) = 0;
      virtual HRESULT __stdcall get_Handle (
        /*[out,retval]*/ long * plHandle ) = 0;
      virtual HRESULT __stdcall get_IsOpen (
        /*[out,retval]*/ short * pisOpen ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall raw_Receive_v1 (
        /*[in]*/ VARIANT * Transaction,
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * ReceiveTimeout,
        /*[out,retval]*/ struct IMSMQMessage * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_Peek_v1 (
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * ReceiveTimeout,
        /*[out,retval]*/ struct IMSMQMessage * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_EnableNotification (
        /*[in]*/ struct IMSMQEvent3 * Event,
        /*[in]*/ VARIANT * Cursor = &vtMissing,
        /*[in]*/ VARIANT * ReceiveTimeout = &vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall raw_ReceiveCurrent_v1 (
        /*[in]*/ VARIANT * Transaction,
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * ReceiveTimeout,
        /*[out,retval]*/ struct IMSMQMessage * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_PeekNext_v1 (
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * ReceiveTimeout,
        /*[out,retval]*/ struct IMSMQMessage * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_PeekCurrent_v1 (
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * ReceiveTimeout,
        /*[out,retval]*/ struct IMSMQMessage * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_Receive (
        /*[in]*/ VARIANT * Transaction,
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * ReceiveTimeout,
        /*[in]*/ VARIANT * WantConnectorType,
        /*[out,retval]*/ struct IMSMQMessage4 * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_Peek (
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * ReceiveTimeout,
        /*[in]*/ VARIANT * WantConnectorType,
        /*[out,retval]*/ struct IMSMQMessage4 * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_ReceiveCurrent (
        /*[in]*/ VARIANT * Transaction,
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * ReceiveTimeout,
        /*[in]*/ VARIANT * WantConnectorType,
        /*[out,retval]*/ struct IMSMQMessage4 * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_PeekNext (
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * ReceiveTimeout,
        /*[in]*/ VARIANT * WantConnectorType,
        /*[out,retval]*/ struct IMSMQMessage4 * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_PeekCurrent (
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * ReceiveTimeout,
        /*[in]*/ VARIANT * WantConnectorType,
        /*[out,retval]*/ struct IMSMQMessage4 * * ppmsg ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ IDispatch * * ppcolProperties ) = 0;
      virtual HRESULT __stdcall get_Handle2 (
        /*[out,retval]*/ VARIANT * pvarHandle ) = 0;
      virtual HRESULT __stdcall raw_ReceiveByLookupId (
        /*[in]*/ VARIANT LookupId,
        /*[in]*/ VARIANT * Transaction,
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * WantConnectorType,
        /*[out,retval]*/ struct IMSMQMessage4 * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_ReceiveNextByLookupId (
        /*[in]*/ VARIANT LookupId,
        /*[in]*/ VARIANT * Transaction,
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * WantConnectorType,
        /*[out,retval]*/ struct IMSMQMessage4 * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_ReceivePreviousByLookupId (
        /*[in]*/ VARIANT LookupId,
        /*[in]*/ VARIANT * Transaction,
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * WantConnectorType,
        /*[out,retval]*/ struct IMSMQMessage4 * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_ReceiveFirstByLookupId (
        /*[in]*/ VARIANT * Transaction,
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * WantConnectorType,
        /*[out,retval]*/ struct IMSMQMessage4 * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_ReceiveLastByLookupId (
        /*[in]*/ VARIANT * Transaction,
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * WantConnectorType,
        /*[out,retval]*/ struct IMSMQMessage4 * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_PeekByLookupId (
        /*[in]*/ VARIANT LookupId,
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * WantConnectorType,
        /*[out,retval]*/ struct IMSMQMessage4 * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_PeekNextByLookupId (
        /*[in]*/ VARIANT LookupId,
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * WantConnectorType,
        /*[out,retval]*/ struct IMSMQMessage4 * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_PeekPreviousByLookupId (
        /*[in]*/ VARIANT LookupId,
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * WantConnectorType,
        /*[out,retval]*/ struct IMSMQMessage4 * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_PeekFirstByLookupId (
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * WantConnectorType,
        /*[out,retval]*/ struct IMSMQMessage4 * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_PeekLastByLookupId (
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * WantConnectorType,
        /*[out,retval]*/ struct IMSMQMessage4 * * ppmsg ) = 0;
      virtual HRESULT __stdcall raw_Purge ( ) = 0;
      virtual HRESULT __stdcall get_IsOpen2 (
        /*[out,retval]*/ VARIANT_BOOL * pisOpen ) = 0;
      virtual HRESULT __stdcall raw_ReceiveByLookupIdAllowPeek (
        /*[in]*/ VARIANT LookupId,
        /*[in]*/ VARIANT * Transaction,
        /*[in]*/ VARIANT * WantDestinationQueue,
        /*[in]*/ VARIANT * WantBody,
        /*[in]*/ VARIANT * WantConnectorType,
        /*[out,retval]*/ struct IMSMQMessage4 * * ppmsg ) = 0;
};

struct __declspec(uuid("eba96b22-2168-11d3-898c-00e02c074f6b"))
IMSMQQueueInfos4 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetProperties))
    IDispatchPtr Properties;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Reset ( );
    IMSMQQueueInfo4Ptr Next ( );
    IDispatchPtr GetProperties ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall raw_Next (
        /*[out,retval]*/ struct IMSMQQueueInfo4 * * ppqinfoNext ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ IDispatch * * ppcolProperties ) = 0;
};

struct __declspec(uuid("eba96b24-2168-11d3-898c-00e02c074f6b"))
IMSMQQuery4 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetProperties))
    IDispatchPtr Properties;

    //
    // Wrapper methods for error-handling
    //

    IMSMQQueueInfos4Ptr LookupQueue_v2 (
        VARIANT * QueueGuid = &vtMissing,
        VARIANT * ServiceTypeGuid = &vtMissing,
        VARIANT * Label = &vtMissing,
        VARIANT * CreateTime = &vtMissing,
        VARIANT * ModifyTime = &vtMissing,
        VARIANT * RelServiceType = &vtMissing,
        VARIANT * RelLabel = &vtMissing,
        VARIANT * RelCreateTime = &vtMissing,
        VARIANT * RelModifyTime = &vtMissing );
    IDispatchPtr GetProperties ( );
    IMSMQQueueInfos4Ptr LookupQueue (
        VARIANT * QueueGuid = &vtMissing,
        VARIANT * ServiceTypeGuid = &vtMissing,
        VARIANT * Label = &vtMissing,
        VARIANT * CreateTime = &vtMissing,
        VARIANT * ModifyTime = &vtMissing,
        VARIANT * RelServiceType = &vtMissing,
        VARIANT * RelLabel = &vtMissing,
        VARIANT * RelCreateTime = &vtMissing,
        VARIANT * RelModifyTime = &vtMissing,
        VARIANT * MulticastAddress = &vtMissing,
        VARIANT * RelMulticastAddress = &vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_LookupQueue_v2 (
        /*[in]*/ VARIANT * QueueGuid,
        /*[in]*/ VARIANT * ServiceTypeGuid,
        /*[in]*/ VARIANT * Label,
        /*[in]*/ VARIANT * CreateTime,
        /*[in]*/ VARIANT * ModifyTime,
        /*[in]*/ VARIANT * RelServiceType,
        /*[in]*/ VARIANT * RelLabel,
        /*[in]*/ VARIANT * RelCreateTime,
        /*[in]*/ VARIANT * RelModifyTime,
        /*[out,retval]*/ struct IMSMQQueueInfos4 * * ppqinfos ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ IDispatch * * ppcolProperties ) = 0;
      virtual HRESULT __stdcall raw_LookupQueue (
        /*[in]*/ VARIANT * QueueGuid,
        /*[in]*/ VARIANT * ServiceTypeGuid,
        /*[in]*/ VARIANT * Label,
        /*[in]*/ VARIANT * CreateTime,
        /*[in]*/ VARIANT * ModifyTime,
        /*[in]*/ VARIANT * RelServiceType,
        /*[in]*/ VARIANT * RelLabel,
        /*[in]*/ VARIANT * RelCreateTime,
        /*[in]*/ VARIANT * RelModifyTime,
        /*[in]*/ VARIANT * MulticastAddress,
        /*[in]*/ VARIANT * RelMulticastAddress,
        /*[out,retval]*/ struct IMSMQQueueInfos4 * * ppqinfos ) = 0;
};

//
// Named GUID constants initializations
//

extern "C" const GUID __declspec(selectany) LIBID_MSMQ =
    {0xd7d6e071,0xdccd,0x11d0,{0xaa,0x4b,0x00,0x60,0x97,0x0d,0xeb,0xae}};
extern "C" const GUID __declspec(selectany) IID_IMSMQEvent =
    {0xd7d6e077,0xdccd,0x11d0,{0xaa,0x4b,0x00,0x60,0x97,0x0d,0xeb,0xae}};
extern "C" const GUID __declspec(selectany) IID_IMSMQEvent2 =
    {0xeba96b12,0x2168,0x11d3,{0x89,0x8c,0x00,0xe0,0x2c,0x07,0x4f,0x6b}};
extern "C" const GUID __declspec(selectany) IID_IMSMQEvent3 =
    {0xeba96b1c,0x2168,0x11d3,{0x89,0x8c,0x00,0xe0,0x2c,0x07,0x4f,0x6b}};
extern "C" const GUID __declspec(selectany) IID_IMSMQTransaction =
    {0xd7d6e07f,0xdccd,0x11d0,{0xaa,0x4b,0x00,0x60,0x97,0x0d,0xeb,0xae}};
extern "C" const GUID __declspec(selectany) IID_IMSMQCoordinatedTransactionDispenser =
    {0xd7d6e081,0xdccd,0x11d0,{0xaa,0x4b,0x00,0x60,0x97,0x0d,0xeb,0xae}};
extern "C" const GUID __declspec(selectany) IID_IMSMQTransactionDispenser =
    {0xd7d6e083,0xdccd,0x11d0,{0xaa,0x4b,0x00,0x60,0x97,0x0d,0xeb,0xae}};
extern "C" const GUID __declspec(selectany) CLSID_MSMQQuery =
    {0xd7d6e073,0xdccd,0x11d0,{0xaa,0x4b,0x00,0x60,0x97,0x0d,0xeb,0xae}};
extern "C" const GUID __declspec(selectany) CLSID_MSMQMessage =
    {0xd7d6e075,0xdccd,0x11d0,{0xaa,0x4b,0x00,0x60,0x97,0x0d,0xeb,0xae}};
extern "C" const GUID __declspec(selectany) CLSID_MSMQQueue =
    {0xd7d6e079,0xdccd,0x11d0,{0xaa,0x4b,0x00,0x60,0x97,0x0d,0xeb,0xae}};
extern "C" const GUID __declspec(selectany) DIID__DMSMQEventEvents =
    {0xd7d6e078,0xdccd,0x11d0,{0xaa,0x4b,0x00,0x60,0x97,0x0d,0xeb,0xae}};
extern "C" const GUID __declspec(selectany) CLSID_MSMQEvent =
    {0xd7d6e07a,0xdccd,0x11d0,{0xaa,0x4b,0x00,0x60,0x97,0x0d,0xeb,0xae}};
extern "C" const GUID __declspec(selectany) CLSID_MSMQQueueInfo =
    {0xd7d6e07c,0xdccd,0x11d0,{0xaa,0x4b,0x00,0x60,0x97,0x0d,0xeb,0xae}};
extern "C" const GUID __declspec(selectany) CLSID_MSMQQueueInfos =
    {0xd7d6e07e,0xdccd,0x11d0,{0xaa,0x4b,0x00,0x60,0x97,0x0d,0xeb,0xae}};
extern "C" const GUID __declspec(selectany) IID_IMSMQTransaction2 =
    {0x2ce0c5b0,0x6e67,0x11d2,{0xb0,0xe6,0x00,0xe0,0x2c,0x07,0x4f,0x6b}};
extern "C" const GUID __declspec(selectany) IID_IMSMQTransaction3 =
    {0xeba96b13,0x2168,0x11d3,{0x89,0x8c,0x00,0xe0,0x2c,0x07,0x4f,0x6b}};
extern "C" const GUID __declspec(selectany) CLSID_MSMQTransaction =
    {0xd7d6e080,0xdccd,0x11d0,{0xaa,0x4b,0x00,0x60,0x97,0x0d,0xeb,0xae}};
extern "C" const GUID __declspec(selectany) IID_IMSMQCoordinatedTransactionDispenser2 =
    {0xeba96b10,0x2168,0x11d3,{0x89,0x8c,0x00,0xe0,0x2c,0x07,0x4f,0x6b}};
extern "C" const GUID __declspec(selectany) IID_IMSMQCoordinatedTransactionDispenser3 =
    {0xeba96b14,0x2168,0x11d3,{0x89,0x8c,0x00,0xe0,0x2c,0x07,0x4f,0x6b}};
extern "C" const GUID __declspec(selectany) CLSID_MSMQCoordinatedTransactionDispenser =
    {0xd7d6e082,0xdccd,0x11d0,{0xaa,0x4b,0x00,0x60,0x97,0x0d,0xeb,0xae}};
extern "C" const GUID __declspec(selectany) IID_IMSMQTransactionDispenser2 =
    {0xeba96b11,0x2168,0x11d3,{0x89,0x8c,0x00,0xe0,0x2c,0x07,0x4f,0x6b}};
extern "C" const GUID __declspec(selectany) IID_IMSMQTransactionDispenser3 =
    {0xeba96b15,0x2168,0x11d3,{0x89,0x8c,0x00,0xe0,0x2c,0x07,0x4f,0x6b}};
extern "C" const GUID __declspec(selectany) CLSID_MSMQTransactionDispenser =
    {0xd7d6e084,0xdccd,0x11d0,{0xaa,0x4b,0x00,0x60,0x97,0x0d,0xeb,0xae}};
extern "C" const GUID __declspec(selectany) IID_IMSMQApplication =
    {0xd7d6e085,0xdccd,0x11d0,{0xaa,0x4b,0x00,0x60,0x97,0x0d,0xeb,0xae}};
extern "C" const GUID __declspec(selectany) IID_IMSMQApplication2 =
    {0x12a30900,0x7300,0x11d2,{0xb0,0xe6,0x00,0xe0,0x2c,0x07,0x4f,0x6b}};
extern "C" const GUID __declspec(selectany) IID_IMSMQApplication3 =
    {0xeba96b1f,0x2168,0x11d3,{0x89,0x8c,0x00,0xe0,0x2c,0x07,0x4f,0x6b}};
extern "C" const GUID __declspec(selectany) CLSID_MSMQApplication =
    {0xd7d6e086,0xdccd,0x11d0,{0xaa,0x4b,0x00,0x60,0x97,0x0d,0xeb,0xae}};
extern "C" const GUID __declspec(selectany) IID_IMSMQDestination =
    {0xeba96b16,0x2168,0x11d3,{0x89,0x8c,0x00,0xe0,0x2c,0x07,0x4f,0x6b}};
extern "C" const GUID __declspec(selectany) IID_IMSMQPrivateDestination =
    {0xeba96b17,0x2168,0x11d3,{0x89,0x8c,0x00,0xe0,0x2c,0x07,0x4f,0x6b}};
extern "C" const GUID __declspec(selectany) CLSID_MSMQDestination =
    {0xeba96b18,0x2168,0x11d3,{0x89,0x8c,0x00,0xe0,0x2c,0x07,0x4f,0x6b}};
extern "C" const GUID __declspec(selectany) IID_IMSMQCollection =
    {0x0188ac2f,0xecb3,0x4173,{0x97,0x79,0x63,0x5c,0xa2,0x03,0x9c,0x72}};
extern "C" const GUID __declspec(selectany) CLSID_MSMQCollection =
    {0xf72b9031,0x2f0c,0x43e8,{0x92,0x4e,0xe6,0x05,0x2c,0xdc,0x49,0x3f}};
extern "C" const GUID __declspec(selectany) IID_IMSMQManagement =
    {0xbe5f0241,0xe489,0x4957,{0x8c,0xc4,0xa4,0x52,0xfc,0xf3,0xe2,0x3e}};
extern "C" const GUID __declspec(selectany) CLSID_MSMQManagement =
    {0x39ce96fe,0xf4c5,0x4484,{0xa1,0x43,0x4c,0x2d,0x5d,0x32,0x42,0x29}};
extern "C" const GUID __declspec(selectany) IID_IMSMQOutgoingQueueManagement =
    {0x64c478fb,0xf9b0,0x4695,{0x8a,0x7f,0x43,0x9a,0xc9,0x43,0x26,0xd3}};
extern "C" const GUID __declspec(selectany) CLSID_MSMQOutgoingQueueManagement =
    {0x0188401c,0x247a,0x4fed,{0x99,0xc6,0xbf,0x14,0x11,0x9d,0x70,0x55}};
extern "C" const GUID __declspec(selectany) IID_IMSMQQueueManagement =
    {0x7fbe7759,0x5760,0x444d,{0xb8,0xa5,0x5e,0x7a,0xb9,0xa8,0x4c,0xce}};
extern "C" const GUID __declspec(selectany) CLSID_MSMQQueueManagement =
    {0x33b6d07e,0xf27d,0x42fa,{0xb2,0xd7,0xbf,0x82,0xe1,0x1e,0x93,0x74}};
extern "C" const GUID __declspec(selectany) IID_IMSMQQuery =
    {0xd7d6e072,0xdccd,0x11d0,{0xaa,0x4b,0x00,0x60,0x97,0x0d,0xeb,0xae}};
extern "C" const GUID __declspec(selectany) IID_IMSMQQueueInfos =
    {0xd7d6e07d,0xdccd,0x11d0,{0xaa,0x4b,0x00,0x60,0x97,0x0d,0xeb,0xae}};
extern "C" const GUID __declspec(selectany) IID_IMSMQQueueInfo =
    {0xd7d6e07b,0xdccd,0x11d0,{0xaa,0x4b,0x00,0x60,0x97,0x0d,0xeb,0xae}};
extern "C" const GUID __declspec(selectany) IID_IMSMQQueue =
    {0xd7d6e076,0xdccd,0x11d0,{0xaa,0x4b,0x00,0x60,0x97,0x0d,0xeb,0xae}};
extern "C" const GUID __declspec(selectany) IID_IMSMQMessage =
    {0xd7d6e074,0xdccd,0x11d0,{0xaa,0x4b,0x00,0x60,0x97,0x0d,0xeb,0xae}};
extern "C" const GUID __declspec(selectany) IID_IMSMQPrivateEvent =
    {0xd7ab3341,0xc9d3,0x11d1,{0xbb,0x47,0x00,0x80,0xc7,0xc5,0xa2,0xc0}};
extern "C" const GUID __declspec(selectany) IID_IMSMQQueueInfo2 =
    {0xfd174a80,0x89cf,0x11d2,{0xb0,0xf2,0x00,0xe0,0x2c,0x07,0x4f,0x6b}};
extern "C" const GUID __declspec(selectany) IID_IMSMQQueueInfos2 =
    {0xeba96b0f,0x2168,0x11d3,{0x89,0x8c,0x00,0xe0,0x2c,0x07,0x4f,0x6b}};
extern "C" const GUID __declspec(selectany) IID_IMSMQQuery2 =
    {0xeba96b0e,0x2168,0x11d3,{0x89,0x8c,0x00,0xe0,0x2c,0x07,0x4f,0x6b}};
extern "C" const GUID __declspec(selectany) IID_IMSMQQueue2 =
    {0xef0574e0,0x06d8,0x11d3,{0xb1,0x00,0x00,0xe0,0x2c,0x07,0x4f,0x6b}};
extern "C" const GUID __declspec(selectany) IID_IMSMQMessage2 =
    {0xd9933be0,0xa567,0x11d2,{0xb0,0xf3,0x00,0xe0,0x2c,0x07,0x4f,0x6b}};
extern "C" const GUID __declspec(selectany) IID_IMSMQQueueInfo3 =
    {0xeba96b1d,0x2168,0x11d3,{0x89,0x8c,0x00,0xe0,0x2c,0x07,0x4f,0x6b}};
extern "C" const GUID __declspec(selectany) IID_IMSMQMessage3 =
    {0xeba96b1a,0x2168,0x11d3,{0x89,0x8c,0x00,0xe0,0x2c,0x07,0x4f,0x6b}};
extern "C" const GUID __declspec(selectany) IID_IMSMQQueue3 =
    {0xeba96b1b,0x2168,0x11d3,{0x89,0x8c,0x00,0xe0,0x2c,0x07,0x4f,0x6b}};
extern "C" const GUID __declspec(selectany) IID_IMSMQQueueInfos3 =
    {0xeba96b1e,0x2168,0x11d3,{0x89,0x8c,0x00,0xe0,0x2c,0x07,0x4f,0x6b}};
extern "C" const GUID __declspec(selectany) IID_IMSMQQuery3 =
    {0xeba96b19,0x2168,0x11d3,{0x89,0x8c,0x00,0xe0,0x2c,0x07,0x4f,0x6b}};
extern "C" const GUID __declspec(selectany) IID_IMSMQQueueInfo4 =
    {0xeba96b21,0x2168,0x11d3,{0x89,0x8c,0x00,0xe0,0x2c,0x07,0x4f,0x6b}};
extern "C" const GUID __declspec(selectany) IID_IMSMQMessage4 =
    {0xeba96b23,0x2168,0x11d3,{0x89,0x8c,0x00,0xe0,0x2c,0x07,0x4f,0x6b}};
extern "C" const GUID __declspec(selectany) IID_IMSMQQueue4 =
    {0xeba96b20,0x2168,0x11d3,{0x89,0x8c,0x00,0xe0,0x2c,0x07,0x4f,0x6b}};
extern "C" const GUID __declspec(selectany) IID_IMSMQQueueInfos4 =
    {0xeba96b22,0x2168,0x11d3,{0x89,0x8c,0x00,0xe0,0x2c,0x07,0x4f,0x6b}};
extern "C" const GUID __declspec(selectany) IID_IMSMQQuery4 =
    {0xeba96b24,0x2168,0x11d3,{0x89,0x8c,0x00,0xe0,0x2c,0x07,0x4f,0x6b}};

//
// Wrapper method implementations
//

#include "c:\temp\msmq\msmqclientlib\msmqbridge\mqoa.tli"

} // namespace MSMQ

#pragma pack(pop)
